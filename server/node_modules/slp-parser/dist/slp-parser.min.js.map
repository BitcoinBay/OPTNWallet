{"version":3,"sources":["node_modules/browser-pack/_prelude.js","dist/index.js","node_modules/base64-js/index.js","node_modules/bignumber.js/bignumber.js","node_modules/buffer/index.js","node_modules/ieee754/index.js"],"names":["f","exports","module","define","amd","window","global","self","this","slpParser","r","e","n","t","o","i","c","require","u","a","Error","code","p","call","length","1","__importDefault","mod","__esModule","default","Object","defineProperty","value","bignumber_js_1","BN","parseSLP","scriptpubkey","Buffer","from","it","itObj","PARSE_CHECK","v","str","extractU8","readUInt8","extractU16","readUInt16LE","extractU32","readUInt32LE","extractPushdata","cnt","toNumber","bufferToBN","r1","r2","multipliedBy","Math","pow","plus","extractU64","checkValidTokenId","tokenId","chunks","len","buf","slice","push","lokadIdStr","charCodeAt","cit","CHECK_NEXT","tokenTypeBuf","reverse","tokenType","includes","transactionType","toString","ticker","name","documentUri","documentHash","decimals","mintBatonVoutBuf","mintBatonVout","qtyBuf","qty","isEqualTo","data","additionalQtyBuf","amounts","amountBuf","byteLength","b64","lens","getLens","validLen","placeHoldersLen","toByteArray","tmp","arr","Arr","_byteLength","curByte","revLookup","fromByteArray","uint8","extraBytes","parts","len2","encodeChunk","lookup","join","Uint8Array","Array","indexOf","start","end","num","output","globalObject","BigNumber","isNumeric","mathceil","ceil","mathfloor","floor","bignumberError","tooManyDigits","BASE","LOG_BASE","MAX_SAFE_INTEGER","POWS_TEN","SQRT_BASE","MAX","bitFloor","coeffToString","s","z","j","compare","x","y","b","xc","yc","k","l","intCheck","min","max","String","isOdd","toExponential","charAt","toFixedPoint","zs","clone","configObject","div","convertBase","parseNumeric","random53bitInt","basePrefix","dotAfter","dotBefore","isInfinityOrNaN","whitespaceOrPlus","P","prototype","constructor","valueOf","ONE","DECIMAL_PLACES","ROUNDING_MODE","TO_EXP_NEG","TO_EXP_POS","MIN_EXP","MAX_EXP","CRYPTO","MODULO_MODE","POW_PRECISION","FORMAT","prefix","groupSize","secondaryGroupSize","groupSeparator","decimalSeparator","fractionGroupSize","fractionGroupSeparator","suffix","ALPHABET","alphabet","caseChanged","isNum","_isBigNumber","test","replace","search","substring","round","DEBUG","toUpperCase","toLowerCase","format","rm","id","c0","ne","maxOrMin","args","method","m","normalise","pop","sd","d","ni","rd","pows10","out","ROUND_UP","ROUND_DOWN","ROUND_CEIL","ROUND_FLOOR","ROUND_HALF_UP","ROUND_HALF_DOWN","ROUND_HALF_EVEN","ROUND_HALF_CEIL","ROUND_HALF_FLOOR","EUCLID","config","set","obj","hasOwnProperty","crypto","getRandomValues","randomBytes","EXPONENTIAL_AT","RANGE","isBigNumber","maximum","arguments","lt","minimum","gt","random","dp","rand","Uint32Array","copy","splice","sum","toBaseOut","baseIn","baseOut","arrL","sign","callerIsToString","concat","multiply","base","temp","xlo","xhi","carry","klo","khi","aL","bL","cmp","subtract","more","prod","prodL","q","qc","rem","remL","rem0","xi","xL","yc0","yL","yz","NaN","isNaN","p1","p2","absoluteValue","abs","comparedTo","decimalPlaces","dividedBy","dividedToIntegerBy","idiv","exponentiatedBy","half","isModExp","nIsBig","nIsNeg","nIsOdd","isInteger","times","integerValue","eq","isFinite","isGreaterThan","isGreaterThanOrEqualTo","gte","isLessThan","isLessThanOrEqualTo","lte","isNegative","isPositive","isZero","minus","xLTy","xe","ye","modulo","xcL","ycL","ylo","yhi","zc","sqrtBase","negated","precision","shiftedBy","squareRoot","sqrt","rep","toFixed","toFormat","split","g1","g2","intPart","fractionPart","isNeg","intDigits","substr","RegExp","toFraction","md","d0","d1","d2","exp","n0","n1","toPrecision","toJSON","base64","ieee754","SlowBuffer","alloc","INSPECT_MAX_BYTES","K_MAX_LENGTH","createBuffer","RangeError","__proto__","arg","encodingOrOffset","TypeError","allocUnsafe","string","encoding","isEncoding","actual","write","fromString","ArrayBuffer","isView","fromArrayLike","isInstance","buffer","array","byteOffset","undefined","fromArrayBuffer","isBuffer","checked","numberIsNaN","type","isArray","fromObject","Symbol","toPrimitive","assertSize","size","mustMatch","loweredCase","utf8ToBytes","base64ToBytes","swap","bidirectionalIndexOf","val","dir","arrayIndexOf","lastIndexOf","indexSize","arrLength","valLength","read","readUInt16BE","foundIndex","found","hexWrite","offset","Number","remaining","strLen","parsed","parseInt","utf8Write","blitBuffer","asciiWrite","byteArray","asciiToBytes","latin1Write","base64Write","ucs2Write","units","hi","lo","utf16leToBytes","base64Slice","utf8Slice","res","secondByte","thirdByte","fourthByte","tempCodePoint","firstByte","codePoint","bytesPerSequence","codePoints","MAX_ARGUMENTS_LENGTH","fromCharCode","apply","decodeCodePointsArray","kMaxLength","TYPED_ARRAY_SUPPORT","foo","typedArraySupport","console","error","enumerable","get","species","configurable","writable","poolSize","fill","allocUnsafeSlow","_isBuffer","list","pos","swap16","swap32","swap64","hexSlice","asciiSlice","latin1Slice","utf16leSlice","toLocaleString","equals","inspect","trim","target","thisStart","thisEnd","thisCopy","targetCopy","_arr","ret","toHex","bytes","checkOffset","ext","checkInt","checkIEEE754","writeFloat","littleEndian","noAssert","writeDouble","newBuf","subarray","readUIntLE","mul","readUIntBE","readUInt32BE","readIntLE","readIntBE","readInt8","readInt16LE","readInt16BE","readInt32LE","readInt32BE","readFloatLE","readFloatBE","readDoubleLE","readDoubleBE","writeUIntLE","writeUIntBE","writeUInt8","writeUInt16LE","writeUInt16BE","writeUInt32LE","writeUInt32BE","writeIntLE","limit","sub","writeIntBE","writeInt8","writeInt16LE","writeInt16BE","writeInt32LE","writeInt32BE","writeFloatLE","writeFloatBE","writeDoubleLE","writeDoubleBE","targetStart","copyWithin","INVALID_BASE64_RE","Infinity","leadSurrogate","base64clean","src","dst","isLE","mLen","nBytes","eLen","eMax","eBias","nBits","rt","log","LN2"],"mappings":"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","sourcesContent":["(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()","\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst bignumber_js_1 = __importDefault(require(\"bignumber.js\"));\nexports.BN = bignumber_js_1.default;\n;\n;\n;\n;\n;\nexports.parseSLP = (scriptpubkey) => {\n    if (typeof scriptpubkey === \"string\") {\n        scriptpubkey = Buffer.from(scriptpubkey, 'hex');\n    }\n    let it = 0; // position in itObj\n    let itObj = scriptpubkey; // object it refers to\n    const OP_0 = 0x00;\n    const OP_16 = 0x60;\n    const OP_RETURN = 0x6a;\n    const OP_PUSHDATA1 = 0x4c;\n    const OP_PUSHDATA2 = 0x4d;\n    const OP_PUSHDATA4 = 0x4e;\n    const PARSE_CHECK = (v, str) => {\n        if (v) {\n            throw Error(str);\n        }\n    };\n    const extractU8 = () => {\n        const r = itObj.readUInt8(it);\n        it += 1;\n        return new bignumber_js_1.default(r);\n    };\n    const extractU16 = () => {\n        const r = itObj.readUInt16LE(it);\n        it += 2;\n        return new bignumber_js_1.default(r);\n    };\n    const extractU32 = () => {\n        const r = itObj.readUInt32LE(it);\n        it += 4;\n        return new bignumber_js_1.default(r);\n    };\n    const extractU64 = () => {\n        const r1 = itObj.readUInt32LE(it);\n        it += 4;\n        const r2 = itObj.readUInt32LE(it);\n        it += 4;\n        return new bignumber_js_1.default(r2).multipliedBy(Math.pow(2, 32)).plus(r1);\n    };\n    PARSE_CHECK(itObj.length === 0, \"scriptpubkey cannot be empty\");\n    PARSE_CHECK(itObj[it] !== OP_RETURN, \"scriptpubkey not op_return\");\n    PARSE_CHECK(itObj.length < 10, \"scriptpubkey too small\"); // TODO what is correct minimum size?\n    ++it;\n    const extractPushdata = () => {\n        if (it === itObj.length) {\n            return -1;\n        }\n        const cnt = extractU8().toNumber();\n        if (cnt > OP_0 && cnt < OP_PUSHDATA1) {\n            if (it + cnt > itObj.length) {\n                --it;\n                return -1;\n            }\n            return cnt;\n        }\n        else if (cnt === OP_PUSHDATA1) {\n            if (it + 1 >= itObj.length) {\n                --it;\n                return -1;\n            }\n            return extractU8().toNumber();\n        }\n        else if (cnt === OP_PUSHDATA2) {\n            if (it + 2 >= itObj.length) {\n                --it;\n                return -1;\n            }\n            return extractU16().toNumber();\n        }\n        else if (cnt === OP_PUSHDATA4) {\n            if (it + 4 >= itObj.length) {\n                --it;\n                return -1;\n            }\n            return extractU32().toNumber();\n        }\n        // other opcodes not allowed\n        --it;\n        return -1;\n    };\n    const bufferToBN = () => {\n        if (itObj.length === 1)\n            return extractU8();\n        if (itObj.length === 2)\n            return extractU16();\n        if (itObj.length === 4)\n            return extractU32();\n        if (itObj.length === 8)\n            return extractU64();\n        throw new Error('extraction of number from buffer failed');\n    };\n    const checkValidTokenId = (tokenId) => tokenId.length === 32;\n    const chunks = [];\n    for (let len = extractPushdata(); len >= 0; len = extractPushdata()) {\n        const buf = itObj.slice(it, it + len);\n        PARSE_CHECK(it + len > itObj.length, \"pushdata data extraction failed\");\n        it += len;\n        chunks.push(buf);\n        if (chunks.length === 1) {\n            const lokadIdStr = chunks[0];\n            PARSE_CHECK(lokadIdStr.length !== 4, \"lokad id wrong size\");\n            PARSE_CHECK(lokadIdStr[0] !== 'S'.charCodeAt(0)\n                || lokadIdStr[1] !== 'L'.charCodeAt(0)\n                || lokadIdStr[2] !== 'P'.charCodeAt(0)\n                || lokadIdStr[3] !== 0x00, \"SLP not in first chunk\");\n        }\n    }\n    PARSE_CHECK(it !== itObj.length, \"trailing data\");\n    PARSE_CHECK(chunks.length === 0, \"chunks empty\");\n    let cit = 0;\n    const CHECK_NEXT = () => {\n        ++cit;\n        PARSE_CHECK(cit === chunks.length, \"parsing ended early\");\n        it = 0;\n        itObj = chunks[cit];\n    };\n    CHECK_NEXT(); // for quick exit check done above\n    const tokenTypeBuf = itObj.reverse();\n    PARSE_CHECK(tokenTypeBuf.length !== 1 && tokenTypeBuf.length !== 2, \"token_type string length must be 1 or 2\");\n    const tokenType = bufferToBN().toNumber();\n    PARSE_CHECK(![0x01, 0x41, 0x81].includes(tokenType), \"token_type not token-type1, nft1-group, or nft1-child\");\n    CHECK_NEXT();\n    const transactionType = itObj.toString();\n    if (transactionType === 'GENESIS') {\n        PARSE_CHECK(chunks.length !== 10, \"wrong number of chunks\");\n        CHECK_NEXT();\n        const ticker = itObj;\n        CHECK_NEXT();\n        const name = itObj;\n        CHECK_NEXT();\n        const documentUri = itObj;\n        CHECK_NEXT();\n        const documentHash = itObj;\n        PARSE_CHECK(!(documentHash.length === 0 || documentHash.length === 32), \"document_hash must be size 0 or 32\");\n        CHECK_NEXT();\n        const decimalsBuf = itObj;\n        PARSE_CHECK(decimalsBuf.length !== 1, \"decimals string length must be 1\");\n        const decimals = bufferToBN().toNumber();\n        PARSE_CHECK(decimals > 9, \"decimals bigger than 9\");\n        CHECK_NEXT();\n        const mintBatonVoutBuf = itObj;\n        let mintBatonVout = 0;\n        PARSE_CHECK(mintBatonVoutBuf.length >= 2, \"mint_baton_vout string length must be 0 or 1\");\n        if (mintBatonVoutBuf.length > 0) {\n            mintBatonVout = bufferToBN().toNumber();\n            PARSE_CHECK(mintBatonVout < 2, \"mint_baton_vout must be at least 2\");\n        }\n        CHECK_NEXT();\n        const qtyBuf = itObj.reverse();\n        PARSE_CHECK(qtyBuf.length !== 8, \"initial_qty must be provided as an 8-byte buffer\");\n        const qty = bufferToBN();\n        if (tokenType === 0x41) {\n            PARSE_CHECK(decimals !== 0, \"NFT1 child token must have divisibility set to 0 decimal places\");\n            PARSE_CHECK(mintBatonVout !== 0, \"NFT1 child token must not have a minting baton\");\n            PARSE_CHECK(!qty.isEqualTo(1), \"NFT1 child token must have quantity of 1\");\n        }\n        const actionData = {\n            ticker,\n            name,\n            documentUri,\n            documentHash,\n            decimals,\n            mintBatonVout,\n            qty\n        };\n        return {\n            tokenType,\n            transactionType,\n            data: actionData\n        };\n    }\n    else if (transactionType === \"MINT\") {\n        PARSE_CHECK(tokenType === 0x41, \"NFT1 Child cannot have MINT transaction type.\");\n        PARSE_CHECK(chunks.length !== 6, \"wrong number of chunks\");\n        CHECK_NEXT();\n        const tokenId = itObj;\n        PARSE_CHECK(!checkValidTokenId(tokenId), \"tokenId invalid size\");\n        CHECK_NEXT();\n        const mintBatonVoutBuf = itObj;\n        let mintBatonVout = 0;\n        PARSE_CHECK(mintBatonVoutBuf.length >= 2, \"mint_baton_vout string length must be 0 or 1\");\n        if (mintBatonVoutBuf.length > 0) {\n            mintBatonVout = bufferToBN().toNumber();\n            PARSE_CHECK(mintBatonVout < 2, \"mint_baton_vout must be at least 2\");\n        }\n        CHECK_NEXT();\n        const additionalQtyBuf = itObj.reverse();\n        PARSE_CHECK(additionalQtyBuf.length !== 8, \"additional_qty must be provided as an 8-byte buffer\");\n        const qty = bufferToBN();\n        const actionData = {\n            tokenId,\n            mintBatonVout,\n            qty\n        };\n        return {\n            tokenType,\n            transactionType,\n            data: actionData\n        };\n    }\n    else if (transactionType === \"SEND\") {\n        PARSE_CHECK(chunks.length < 4, \"wrong number of chunks\");\n        CHECK_NEXT();\n        const tokenId = itObj;\n        PARSE_CHECK(!checkValidTokenId(tokenId), \"tokenId invalid size\");\n        CHECK_NEXT();\n        const amounts = [];\n        while (cit !== chunks.length) {\n            const amountBuf = itObj.reverse();\n            PARSE_CHECK(amountBuf.length !== 8, \"amount string size not 8 bytes\");\n            const value = bufferToBN();\n            amounts.push(value);\n            ++cit;\n            itObj = chunks[cit];\n            it = 0;\n        }\n        PARSE_CHECK(amounts.length === 0, \"token_amounts size is 0\");\n        PARSE_CHECK(amounts.length > 19, \"token_amounts size is greater than 19\");\n        const actionData = {\n            tokenId,\n            amounts\n        };\n        return {\n            tokenType,\n            transactionType,\n            data: actionData\n        };\n    }\n    else {\n        PARSE_CHECK(true, \"unknown action type\");\n    }\n    // unreachable code\n    return {\n        tokenType,\n        transactionType,\n        data: {}\n    };\n};\n//# sourceMappingURL=index.js.map","'use strict'\n\nexports.byteLength = byteLength\nexports.toByteArray = toByteArray\nexports.fromByteArray = fromByteArray\n\nvar lookup = []\nvar revLookup = []\nvar Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array\n\nvar code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'\nfor (var i = 0, len = code.length; i < len; ++i) {\n  lookup[i] = code[i]\n  revLookup[code.charCodeAt(i)] = i\n}\n\n// Support decoding URL-safe base64 strings, as Node.js does.\n// See: https://en.wikipedia.org/wiki/Base64#URL_applications\nrevLookup['-'.charCodeAt(0)] = 62\nrevLookup['_'.charCodeAt(0)] = 63\n\nfunction getLens (b64) {\n  var len = b64.length\n\n  if (len % 4 > 0) {\n    throw new Error('Invalid string. Length must be a multiple of 4')\n  }\n\n  // Trim off extra bytes after placeholder bytes are found\n  // See: https://github.com/beatgammit/base64-js/issues/42\n  var validLen = b64.indexOf('=')\n  if (validLen === -1) validLen = len\n\n  var placeHoldersLen = validLen === len\n    ? 0\n    : 4 - (validLen % 4)\n\n  return [validLen, placeHoldersLen]\n}\n\n// base64 is 4/3 + up to two characters of the original data\nfunction byteLength (b64) {\n  var lens = getLens(b64)\n  var validLen = lens[0]\n  var placeHoldersLen = lens[1]\n  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen\n}\n\nfunction _byteLength (b64, validLen, placeHoldersLen) {\n  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen\n}\n\nfunction toByteArray (b64) {\n  var tmp\n  var lens = getLens(b64)\n  var validLen = lens[0]\n  var placeHoldersLen = lens[1]\n\n  var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen))\n\n  var curByte = 0\n\n  // if there are placeholders, only get up to the last complete 4 chars\n  var len = placeHoldersLen > 0\n    ? validLen - 4\n    : validLen\n\n  var i\n  for (i = 0; i < len; i += 4) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 18) |\n      (revLookup[b64.charCodeAt(i + 1)] << 12) |\n      (revLookup[b64.charCodeAt(i + 2)] << 6) |\n      revLookup[b64.charCodeAt(i + 3)]\n    arr[curByte++] = (tmp >> 16) & 0xFF\n    arr[curByte++] = (tmp >> 8) & 0xFF\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  if (placeHoldersLen === 2) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 2) |\n      (revLookup[b64.charCodeAt(i + 1)] >> 4)\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  if (placeHoldersLen === 1) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 10) |\n      (revLookup[b64.charCodeAt(i + 1)] << 4) |\n      (revLookup[b64.charCodeAt(i + 2)] >> 2)\n    arr[curByte++] = (tmp >> 8) & 0xFF\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  return arr\n}\n\nfunction tripletToBase64 (num) {\n  return lookup[num >> 18 & 0x3F] +\n    lookup[num >> 12 & 0x3F] +\n    lookup[num >> 6 & 0x3F] +\n    lookup[num & 0x3F]\n}\n\nfunction encodeChunk (uint8, start, end) {\n  var tmp\n  var output = []\n  for (var i = start; i < end; i += 3) {\n    tmp =\n      ((uint8[i] << 16) & 0xFF0000) +\n      ((uint8[i + 1] << 8) & 0xFF00) +\n      (uint8[i + 2] & 0xFF)\n    output.push(tripletToBase64(tmp))\n  }\n  return output.join('')\n}\n\nfunction fromByteArray (uint8) {\n  var tmp\n  var len = uint8.length\n  var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes\n  var parts = []\n  var maxChunkLength = 16383 // must be multiple of 3\n\n  // go through the array every three bytes, we'll deal with trailing stuff later\n  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {\n    parts.push(encodeChunk(\n      uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)\n    ))\n  }\n\n  // pad the end with zeros, but make sure to not forget the extra bytes\n  if (extraBytes === 1) {\n    tmp = uint8[len - 1]\n    parts.push(\n      lookup[tmp >> 2] +\n      lookup[(tmp << 4) & 0x3F] +\n      '=='\n    )\n  } else if (extraBytes === 2) {\n    tmp = (uint8[len - 2] << 8) + uint8[len - 1]\n    parts.push(\n      lookup[tmp >> 10] +\n      lookup[(tmp >> 4) & 0x3F] +\n      lookup[(tmp << 2) & 0x3F] +\n      '='\n    )\n  }\n\n  return parts.join('')\n}\n",";(function (globalObject) {\r\n  'use strict';\r\n\r\n/*\r\n *      bignumber.js v9.0.0\r\n *      A JavaScript library for arbitrary-precision arithmetic.\r\n *      https://github.com/MikeMcl/bignumber.js\r\n *      Copyright (c) 2019 Michael Mclaughlin <M8ch88l@gmail.com>\r\n *      MIT Licensed.\r\n *\r\n *      BigNumber.prototype methods     |  BigNumber methods\r\n *                                      |\r\n *      absoluteValue            abs    |  clone\r\n *      comparedTo                      |  config               set\r\n *      decimalPlaces            dp     |      DECIMAL_PLACES\r\n *      dividedBy                div    |      ROUNDING_MODE\r\n *      dividedToIntegerBy       idiv   |      EXPONENTIAL_AT\r\n *      exponentiatedBy          pow    |      RANGE\r\n *      integerValue                    |      CRYPTO\r\n *      isEqualTo                eq     |      MODULO_MODE\r\n *      isFinite                        |      POW_PRECISION\r\n *      isGreaterThan            gt     |      FORMAT\r\n *      isGreaterThanOrEqualTo   gte    |      ALPHABET\r\n *      isInteger                       |  isBigNumber\r\n *      isLessThan               lt     |  maximum              max\r\n *      isLessThanOrEqualTo      lte    |  minimum              min\r\n *      isNaN                           |  random\r\n *      isNegative                      |  sum\r\n *      isPositive                      |\r\n *      isZero                          |\r\n *      minus                           |\r\n *      modulo                   mod    |\r\n *      multipliedBy             times  |\r\n *      negated                         |\r\n *      plus                            |\r\n *      precision                sd     |\r\n *      shiftedBy                       |\r\n *      squareRoot               sqrt   |\r\n *      toExponential                   |\r\n *      toFixed                         |\r\n *      toFormat                        |\r\n *      toFraction                      |\r\n *      toJSON                          |\r\n *      toNumber                        |\r\n *      toPrecision                     |\r\n *      toString                        |\r\n *      valueOf                         |\r\n *\r\n */\r\n\r\n\r\n  var BigNumber,\r\n    isNumeric = /^-?(?:\\d+(?:\\.\\d*)?|\\.\\d+)(?:e[+-]?\\d+)?$/i,\r\n    mathceil = Math.ceil,\r\n    mathfloor = Math.floor,\r\n\r\n    bignumberError = '[BigNumber Error] ',\r\n    tooManyDigits = bignumberError + 'Number primitive has more than 15 significant digits: ',\r\n\r\n    BASE = 1e14,\r\n    LOG_BASE = 14,\r\n    MAX_SAFE_INTEGER = 0x1fffffffffffff,         // 2^53 - 1\r\n    // MAX_INT32 = 0x7fffffff,                   // 2^31 - 1\r\n    POWS_TEN = [1, 10, 100, 1e3, 1e4, 1e5, 1e6, 1e7, 1e8, 1e9, 1e10, 1e11, 1e12, 1e13],\r\n    SQRT_BASE = 1e7,\r\n\r\n    // EDITABLE\r\n    // The limit on the value of DECIMAL_PLACES, TO_EXP_NEG, TO_EXP_POS, MIN_EXP, MAX_EXP, and\r\n    // the arguments to toExponential, toFixed, toFormat, and toPrecision.\r\n    MAX = 1E9;                                   // 0 to MAX_INT32\r\n\r\n\r\n  /*\r\n   * Create and return a BigNumber constructor.\r\n   */\r\n  function clone(configObject) {\r\n    var div, convertBase, parseNumeric,\r\n      P = BigNumber.prototype = { constructor: BigNumber, toString: null, valueOf: null },\r\n      ONE = new BigNumber(1),\r\n\r\n\r\n      //----------------------------- EDITABLE CONFIG DEFAULTS -------------------------------\r\n\r\n\r\n      // The default values below must be integers within the inclusive ranges stated.\r\n      // The values can also be changed at run-time using BigNumber.set.\r\n\r\n      // The maximum number of decimal places for operations involving division.\r\n      DECIMAL_PLACES = 20,                     // 0 to MAX\r\n\r\n      // The rounding mode used when rounding to the above decimal places, and when using\r\n      // toExponential, toFixed, toFormat and toPrecision, and round (default value).\r\n      // UP         0 Away from zero.\r\n      // DOWN       1 Towards zero.\r\n      // CEIL       2 Towards +Infinity.\r\n      // FLOOR      3 Towards -Infinity.\r\n      // HALF_UP    4 Towards nearest neighbour. If equidistant, up.\r\n      // HALF_DOWN  5 Towards nearest neighbour. If equidistant, down.\r\n      // HALF_EVEN  6 Towards nearest neighbour. If equidistant, towards even neighbour.\r\n      // HALF_CEIL  7 Towards nearest neighbour. If equidistant, towards +Infinity.\r\n      // HALF_FLOOR 8 Towards nearest neighbour. If equidistant, towards -Infinity.\r\n      ROUNDING_MODE = 4,                       // 0 to 8\r\n\r\n      // EXPONENTIAL_AT : [TO_EXP_NEG , TO_EXP_POS]\r\n\r\n      // The exponent value at and beneath which toString returns exponential notation.\r\n      // Number type: -7\r\n      TO_EXP_NEG = -7,                         // 0 to -MAX\r\n\r\n      // The exponent value at and above which toString returns exponential notation.\r\n      // Number type: 21\r\n      TO_EXP_POS = 21,                         // 0 to MAX\r\n\r\n      // RANGE : [MIN_EXP, MAX_EXP]\r\n\r\n      // The minimum exponent value, beneath which underflow to zero occurs.\r\n      // Number type: -324  (5e-324)\r\n      MIN_EXP = -1e7,                          // -1 to -MAX\r\n\r\n      // The maximum exponent value, above which overflow to Infinity occurs.\r\n      // Number type:  308  (1.7976931348623157e+308)\r\n      // For MAX_EXP > 1e7, e.g. new BigNumber('1e100000000').plus(1) may be slow.\r\n      MAX_EXP = 1e7,                           // 1 to MAX\r\n\r\n      // Whether to use cryptographically-secure random number generation, if available.\r\n      CRYPTO = false,                          // true or false\r\n\r\n      // The modulo mode used when calculating the modulus: a mod n.\r\n      // The quotient (q = a / n) is calculated according to the corresponding rounding mode.\r\n      // The remainder (r) is calculated as: r = a - n * q.\r\n      //\r\n      // UP        0 The remainder is positive if the dividend is negative, else is negative.\r\n      // DOWN      1 The remainder has the same sign as the dividend.\r\n      //             This modulo mode is commonly known as 'truncated division' and is\r\n      //             equivalent to (a % n) in JavaScript.\r\n      // FLOOR     3 The remainder has the same sign as the divisor (Python %).\r\n      // HALF_EVEN 6 This modulo mode implements the IEEE 754 remainder function.\r\n      // EUCLID    9 Euclidian division. q = sign(n) * floor(a / abs(n)).\r\n      //             The remainder is always positive.\r\n      //\r\n      // The truncated division, floored division, Euclidian division and IEEE 754 remainder\r\n      // modes are commonly used for the modulus operation.\r\n      // Although the other rounding modes can also be used, they may not give useful results.\r\n      MODULO_MODE = 1,                         // 0 to 9\r\n\r\n      // The maximum number of significant digits of the result of the exponentiatedBy operation.\r\n      // If POW_PRECISION is 0, there will be unlimited significant digits.\r\n      POW_PRECISION = 0,                    // 0 to MAX\r\n\r\n      // The format specification used by the BigNumber.prototype.toFormat method.\r\n      FORMAT = {\r\n        prefix: '',\r\n        groupSize: 3,\r\n        secondaryGroupSize: 0,\r\n        groupSeparator: ',',\r\n        decimalSeparator: '.',\r\n        fractionGroupSize: 0,\r\n        fractionGroupSeparator: '\\xA0',      // non-breaking space\r\n        suffix: ''\r\n      },\r\n\r\n      // The alphabet used for base conversion. It must be at least 2 characters long, with no '+',\r\n      // '-', '.', whitespace, or repeated character.\r\n      // '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ$_'\r\n      ALPHABET = '0123456789abcdefghijklmnopqrstuvwxyz';\r\n\r\n\r\n    //------------------------------------------------------------------------------------------\r\n\r\n\r\n    // CONSTRUCTOR\r\n\r\n\r\n    /*\r\n     * The BigNumber constructor and exported function.\r\n     * Create and return a new instance of a BigNumber object.\r\n     *\r\n     * v {number|string|BigNumber} A numeric value.\r\n     * [b] {number} The base of v. Integer, 2 to ALPHABET.length inclusive.\r\n     */\r\n    function BigNumber(v, b) {\r\n      var alphabet, c, caseChanged, e, i, isNum, len, str,\r\n        x = this;\r\n\r\n      // Enable constructor call without `new`.\r\n      if (!(x instanceof BigNumber)) return new BigNumber(v, b);\r\n\r\n      if (b == null) {\r\n\r\n        if (v && v._isBigNumber === true) {\r\n          x.s = v.s;\r\n\r\n          if (!v.c || v.e > MAX_EXP) {\r\n            x.c = x.e = null;\r\n          } else if (v.e < MIN_EXP) {\r\n            x.c = [x.e = 0];\r\n          } else {\r\n            x.e = v.e;\r\n            x.c = v.c.slice();\r\n          }\r\n\r\n          return;\r\n        }\r\n\r\n        if ((isNum = typeof v == 'number') && v * 0 == 0) {\r\n\r\n          // Use `1 / n` to handle minus zero also.\r\n          x.s = 1 / v < 0 ? (v = -v, -1) : 1;\r\n\r\n          // Fast path for integers, where n < 2147483648 (2**31).\r\n          if (v === ~~v) {\r\n            for (e = 0, i = v; i >= 10; i /= 10, e++);\r\n\r\n            if (e > MAX_EXP) {\r\n              x.c = x.e = null;\r\n            } else {\r\n              x.e = e;\r\n              x.c = [v];\r\n            }\r\n\r\n            return;\r\n          }\r\n\r\n          str = String(v);\r\n        } else {\r\n\r\n          if (!isNumeric.test(str = String(v))) return parseNumeric(x, str, isNum);\r\n\r\n          x.s = str.charCodeAt(0) == 45 ? (str = str.slice(1), -1) : 1;\r\n        }\r\n\r\n        // Decimal point?\r\n        if ((e = str.indexOf('.')) > -1) str = str.replace('.', '');\r\n\r\n        // Exponential form?\r\n        if ((i = str.search(/e/i)) > 0) {\r\n\r\n          // Determine exponent.\r\n          if (e < 0) e = i;\r\n          e += +str.slice(i + 1);\r\n          str = str.substring(0, i);\r\n        } else if (e < 0) {\r\n\r\n          // Integer.\r\n          e = str.length;\r\n        }\r\n\r\n      } else {\r\n\r\n        // '[BigNumber Error] Base {not a primitive number|not an integer|out of range}: {b}'\r\n        intCheck(b, 2, ALPHABET.length, 'Base');\r\n\r\n        // Allow exponential notation to be used with base 10 argument, while\r\n        // also rounding to DECIMAL_PLACES as with other bases.\r\n        if (b == 10) {\r\n          x = new BigNumber(v);\r\n          return round(x, DECIMAL_PLACES + x.e + 1, ROUNDING_MODE);\r\n        }\r\n\r\n        str = String(v);\r\n\r\n        if (isNum = typeof v == 'number') {\r\n\r\n          // Avoid potential interpretation of Infinity and NaN as base 44+ values.\r\n          if (v * 0 != 0) return parseNumeric(x, str, isNum, b);\r\n\r\n          x.s = 1 / v < 0 ? (str = str.slice(1), -1) : 1;\r\n\r\n          // '[BigNumber Error] Number primitive has more than 15 significant digits: {n}'\r\n          if (BigNumber.DEBUG && str.replace(/^0\\.0*|\\./, '').length > 15) {\r\n            throw Error\r\n             (tooManyDigits + v);\r\n          }\r\n        } else {\r\n          x.s = str.charCodeAt(0) === 45 ? (str = str.slice(1), -1) : 1;\r\n        }\r\n\r\n        alphabet = ALPHABET.slice(0, b);\r\n        e = i = 0;\r\n\r\n        // Check that str is a valid base b number.\r\n        // Don't use RegExp, so alphabet can contain special characters.\r\n        for (len = str.length; i < len; i++) {\r\n          if (alphabet.indexOf(c = str.charAt(i)) < 0) {\r\n            if (c == '.') {\r\n\r\n              // If '.' is not the first character and it has not be found before.\r\n              if (i > e) {\r\n                e = len;\r\n                continue;\r\n              }\r\n            } else if (!caseChanged) {\r\n\r\n              // Allow e.g. hexadecimal 'FF' as well as 'ff'.\r\n              if (str == str.toUpperCase() && (str = str.toLowerCase()) ||\r\n                  str == str.toLowerCase() && (str = str.toUpperCase())) {\r\n                caseChanged = true;\r\n                i = -1;\r\n                e = 0;\r\n                continue;\r\n              }\r\n            }\r\n\r\n            return parseNumeric(x, String(v), isNum, b);\r\n          }\r\n        }\r\n\r\n        // Prevent later check for length on converted number.\r\n        isNum = false;\r\n        str = convertBase(str, b, 10, x.s);\r\n\r\n        // Decimal point?\r\n        if ((e = str.indexOf('.')) > -1) str = str.replace('.', '');\r\n        else e = str.length;\r\n      }\r\n\r\n      // Determine leading zeros.\r\n      for (i = 0; str.charCodeAt(i) === 48; i++);\r\n\r\n      // Determine trailing zeros.\r\n      for (len = str.length; str.charCodeAt(--len) === 48;);\r\n\r\n      if (str = str.slice(i, ++len)) {\r\n        len -= i;\r\n\r\n        // '[BigNumber Error] Number primitive has more than 15 significant digits: {n}'\r\n        if (isNum && BigNumber.DEBUG &&\r\n          len > 15 && (v > MAX_SAFE_INTEGER || v !== mathfloor(v))) {\r\n            throw Error\r\n             (tooManyDigits + (x.s * v));\r\n        }\r\n\r\n         // Overflow?\r\n        if ((e = e - i - 1) > MAX_EXP) {\r\n\r\n          // Infinity.\r\n          x.c = x.e = null;\r\n\r\n        // Underflow?\r\n        } else if (e < MIN_EXP) {\r\n\r\n          // Zero.\r\n          x.c = [x.e = 0];\r\n        } else {\r\n          x.e = e;\r\n          x.c = [];\r\n\r\n          // Transform base\r\n\r\n          // e is the base 10 exponent.\r\n          // i is where to slice str to get the first element of the coefficient array.\r\n          i = (e + 1) % LOG_BASE;\r\n          if (e < 0) i += LOG_BASE;  // i < 1\r\n\r\n          if (i < len) {\r\n            if (i) x.c.push(+str.slice(0, i));\r\n\r\n            for (len -= LOG_BASE; i < len;) {\r\n              x.c.push(+str.slice(i, i += LOG_BASE));\r\n            }\r\n\r\n            i = LOG_BASE - (str = str.slice(i)).length;\r\n          } else {\r\n            i -= len;\r\n          }\r\n\r\n          for (; i--; str += '0');\r\n          x.c.push(+str);\r\n        }\r\n      } else {\r\n\r\n        // Zero.\r\n        x.c = [x.e = 0];\r\n      }\r\n    }\r\n\r\n\r\n    // CONSTRUCTOR PROPERTIES\r\n\r\n\r\n    BigNumber.clone = clone;\r\n\r\n    BigNumber.ROUND_UP = 0;\r\n    BigNumber.ROUND_DOWN = 1;\r\n    BigNumber.ROUND_CEIL = 2;\r\n    BigNumber.ROUND_FLOOR = 3;\r\n    BigNumber.ROUND_HALF_UP = 4;\r\n    BigNumber.ROUND_HALF_DOWN = 5;\r\n    BigNumber.ROUND_HALF_EVEN = 6;\r\n    BigNumber.ROUND_HALF_CEIL = 7;\r\n    BigNumber.ROUND_HALF_FLOOR = 8;\r\n    BigNumber.EUCLID = 9;\r\n\r\n\r\n    /*\r\n     * Configure infrequently-changing library-wide settings.\r\n     *\r\n     * Accept an object with the following optional properties (if the value of a property is\r\n     * a number, it must be an integer within the inclusive range stated):\r\n     *\r\n     *   DECIMAL_PLACES   {number}           0 to MAX\r\n     *   ROUNDING_MODE    {number}           0 to 8\r\n     *   EXPONENTIAL_AT   {number|number[]}  -MAX to MAX  or  [-MAX to 0, 0 to MAX]\r\n     *   RANGE            {number|number[]}  -MAX to MAX (not zero)  or  [-MAX to -1, 1 to MAX]\r\n     *   CRYPTO           {boolean}          true or false\r\n     *   MODULO_MODE      {number}           0 to 9\r\n     *   POW_PRECISION       {number}           0 to MAX\r\n     *   ALPHABET         {string}           A string of two or more unique characters which does\r\n     *                                       not contain '.'.\r\n     *   FORMAT           {object}           An object with some of the following properties:\r\n     *     prefix                 {string}\r\n     *     groupSize              {number}\r\n     *     secondaryGroupSize     {number}\r\n     *     groupSeparator         {string}\r\n     *     decimalSeparator       {string}\r\n     *     fractionGroupSize      {number}\r\n     *     fractionGroupSeparator {string}\r\n     *     suffix                 {string}\r\n     *\r\n     * (The values assigned to the above FORMAT object properties are not checked for validity.)\r\n     *\r\n     * E.g.\r\n     * BigNumber.config({ DECIMAL_PLACES : 20, ROUNDING_MODE : 4 })\r\n     *\r\n     * Ignore properties/parameters set to null or undefined, except for ALPHABET.\r\n     *\r\n     * Return an object with the properties current values.\r\n     */\r\n    BigNumber.config = BigNumber.set = function (obj) {\r\n      var p, v;\r\n\r\n      if (obj != null) {\r\n\r\n        if (typeof obj == 'object') {\r\n\r\n          // DECIMAL_PLACES {number} Integer, 0 to MAX inclusive.\r\n          // '[BigNumber Error] DECIMAL_PLACES {not a primitive number|not an integer|out of range}: {v}'\r\n          if (obj.hasOwnProperty(p = 'DECIMAL_PLACES')) {\r\n            v = obj[p];\r\n            intCheck(v, 0, MAX, p);\r\n            DECIMAL_PLACES = v;\r\n          }\r\n\r\n          // ROUNDING_MODE {number} Integer, 0 to 8 inclusive.\r\n          // '[BigNumber Error] ROUNDING_MODE {not a primitive number|not an integer|out of range}: {v}'\r\n          if (obj.hasOwnProperty(p = 'ROUNDING_MODE')) {\r\n            v = obj[p];\r\n            intCheck(v, 0, 8, p);\r\n            ROUNDING_MODE = v;\r\n          }\r\n\r\n          // EXPONENTIAL_AT {number|number[]}\r\n          // Integer, -MAX to MAX inclusive or\r\n          // [integer -MAX to 0 inclusive, 0 to MAX inclusive].\r\n          // '[BigNumber Error] EXPONENTIAL_AT {not a primitive number|not an integer|out of range}: {v}'\r\n          if (obj.hasOwnProperty(p = 'EXPONENTIAL_AT')) {\r\n            v = obj[p];\r\n            if (v && v.pop) {\r\n              intCheck(v[0], -MAX, 0, p);\r\n              intCheck(v[1], 0, MAX, p);\r\n              TO_EXP_NEG = v[0];\r\n              TO_EXP_POS = v[1];\r\n            } else {\r\n              intCheck(v, -MAX, MAX, p);\r\n              TO_EXP_NEG = -(TO_EXP_POS = v < 0 ? -v : v);\r\n            }\r\n          }\r\n\r\n          // RANGE {number|number[]} Non-zero integer, -MAX to MAX inclusive or\r\n          // [integer -MAX to -1 inclusive, integer 1 to MAX inclusive].\r\n          // '[BigNumber Error] RANGE {not a primitive number|not an integer|out of range|cannot be zero}: {v}'\r\n          if (obj.hasOwnProperty(p = 'RANGE')) {\r\n            v = obj[p];\r\n            if (v && v.pop) {\r\n              intCheck(v[0], -MAX, -1, p);\r\n              intCheck(v[1], 1, MAX, p);\r\n              MIN_EXP = v[0];\r\n              MAX_EXP = v[1];\r\n            } else {\r\n              intCheck(v, -MAX, MAX, p);\r\n              if (v) {\r\n                MIN_EXP = -(MAX_EXP = v < 0 ? -v : v);\r\n              } else {\r\n                throw Error\r\n                 (bignumberError + p + ' cannot be zero: ' + v);\r\n              }\r\n            }\r\n          }\r\n\r\n          // CRYPTO {boolean} true or false.\r\n          // '[BigNumber Error] CRYPTO not true or false: {v}'\r\n          // '[BigNumber Error] crypto unavailable'\r\n          if (obj.hasOwnProperty(p = 'CRYPTO')) {\r\n            v = obj[p];\r\n            if (v === !!v) {\r\n              if (v) {\r\n                if (typeof crypto != 'undefined' && crypto &&\r\n                 (crypto.getRandomValues || crypto.randomBytes)) {\r\n                  CRYPTO = v;\r\n                } else {\r\n                  CRYPTO = !v;\r\n                  throw Error\r\n                   (bignumberError + 'crypto unavailable');\r\n                }\r\n              } else {\r\n                CRYPTO = v;\r\n              }\r\n            } else {\r\n              throw Error\r\n               (bignumberError + p + ' not true or false: ' + v);\r\n            }\r\n          }\r\n\r\n          // MODULO_MODE {number} Integer, 0 to 9 inclusive.\r\n          // '[BigNumber Error] MODULO_MODE {not a primitive number|not an integer|out of range}: {v}'\r\n          if (obj.hasOwnProperty(p = 'MODULO_MODE')) {\r\n            v = obj[p];\r\n            intCheck(v, 0, 9, p);\r\n            MODULO_MODE = v;\r\n          }\r\n\r\n          // POW_PRECISION {number} Integer, 0 to MAX inclusive.\r\n          // '[BigNumber Error] POW_PRECISION {not a primitive number|not an integer|out of range}: {v}'\r\n          if (obj.hasOwnProperty(p = 'POW_PRECISION')) {\r\n            v = obj[p];\r\n            intCheck(v, 0, MAX, p);\r\n            POW_PRECISION = v;\r\n          }\r\n\r\n          // FORMAT {object}\r\n          // '[BigNumber Error] FORMAT not an object: {v}'\r\n          if (obj.hasOwnProperty(p = 'FORMAT')) {\r\n            v = obj[p];\r\n            if (typeof v == 'object') FORMAT = v;\r\n            else throw Error\r\n             (bignumberError + p + ' not an object: ' + v);\r\n          }\r\n\r\n          // ALPHABET {string}\r\n          // '[BigNumber Error] ALPHABET invalid: {v}'\r\n          if (obj.hasOwnProperty(p = 'ALPHABET')) {\r\n            v = obj[p];\r\n\r\n            // Disallow if only one character,\r\n            // or if it contains '+', '-', '.', whitespace, or a repeated character.\r\n            if (typeof v == 'string' && !/^.$|[+-.\\s]|(.).*\\1/.test(v)) {\r\n              ALPHABET = v;\r\n            } else {\r\n              throw Error\r\n               (bignumberError + p + ' invalid: ' + v);\r\n            }\r\n          }\r\n\r\n        } else {\r\n\r\n          // '[BigNumber Error] Object expected: {v}'\r\n          throw Error\r\n           (bignumberError + 'Object expected: ' + obj);\r\n        }\r\n      }\r\n\r\n      return {\r\n        DECIMAL_PLACES: DECIMAL_PLACES,\r\n        ROUNDING_MODE: ROUNDING_MODE,\r\n        EXPONENTIAL_AT: [TO_EXP_NEG, TO_EXP_POS],\r\n        RANGE: [MIN_EXP, MAX_EXP],\r\n        CRYPTO: CRYPTO,\r\n        MODULO_MODE: MODULO_MODE,\r\n        POW_PRECISION: POW_PRECISION,\r\n        FORMAT: FORMAT,\r\n        ALPHABET: ALPHABET\r\n      };\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if v is a BigNumber instance, otherwise return false.\r\n     *\r\n     * If BigNumber.DEBUG is true, throw if a BigNumber instance is not well-formed.\r\n     *\r\n     * v {any}\r\n     *\r\n     * '[BigNumber Error] Invalid BigNumber: {v}'\r\n     */\r\n    BigNumber.isBigNumber = function (v) {\r\n      if (!v || v._isBigNumber !== true) return false;\r\n      if (!BigNumber.DEBUG) return true;\r\n\r\n      var i, n,\r\n        c = v.c,\r\n        e = v.e,\r\n        s = v.s;\r\n\r\n      out: if ({}.toString.call(c) == '[object Array]') {\r\n\r\n        if ((s === 1 || s === -1) && e >= -MAX && e <= MAX && e === mathfloor(e)) {\r\n\r\n          // If the first element is zero, the BigNumber value must be zero.\r\n          if (c[0] === 0) {\r\n            if (e === 0 && c.length === 1) return true;\r\n            break out;\r\n          }\r\n\r\n          // Calculate number of digits that c[0] should have, based on the exponent.\r\n          i = (e + 1) % LOG_BASE;\r\n          if (i < 1) i += LOG_BASE;\r\n\r\n          // Calculate number of digits of c[0].\r\n          //if (Math.ceil(Math.log(c[0] + 1) / Math.LN10) == i) {\r\n          if (String(c[0]).length == i) {\r\n\r\n            for (i = 0; i < c.length; i++) {\r\n              n = c[i];\r\n              if (n < 0 || n >= BASE || n !== mathfloor(n)) break out;\r\n            }\r\n\r\n            // Last element cannot be zero, unless it is the only element.\r\n            if (n !== 0) return true;\r\n          }\r\n        }\r\n\r\n      // Infinity/NaN\r\n      } else if (c === null && e === null && (s === null || s === 1 || s === -1)) {\r\n        return true;\r\n      }\r\n\r\n      throw Error\r\n        (bignumberError + 'Invalid BigNumber: ' + v);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a new BigNumber whose value is the maximum of the arguments.\r\n     *\r\n     * arguments {number|string|BigNumber}\r\n     */\r\n    BigNumber.maximum = BigNumber.max = function () {\r\n      return maxOrMin(arguments, P.lt);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a new BigNumber whose value is the minimum of the arguments.\r\n     *\r\n     * arguments {number|string|BigNumber}\r\n     */\r\n    BigNumber.minimum = BigNumber.min = function () {\r\n      return maxOrMin(arguments, P.gt);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a new BigNumber with a random value equal to or greater than 0 and less than 1,\r\n     * and with dp, or DECIMAL_PLACES if dp is omitted, decimal places (or less if trailing\r\n     * zeros are produced).\r\n     *\r\n     * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp}'\r\n     * '[BigNumber Error] crypto unavailable'\r\n     */\r\n    BigNumber.random = (function () {\r\n      var pow2_53 = 0x20000000000000;\r\n\r\n      // Return a 53 bit integer n, where 0 <= n < 9007199254740992.\r\n      // Check if Math.random() produces more than 32 bits of randomness.\r\n      // If it does, assume at least 53 bits are produced, otherwise assume at least 30 bits.\r\n      // 0x40000000 is 2^30, 0x800000 is 2^23, 0x1fffff is 2^21 - 1.\r\n      var random53bitInt = (Math.random() * pow2_53) & 0x1fffff\r\n       ? function () { return mathfloor(Math.random() * pow2_53); }\r\n       : function () { return ((Math.random() * 0x40000000 | 0) * 0x800000) +\r\n         (Math.random() * 0x800000 | 0); };\r\n\r\n      return function (dp) {\r\n        var a, b, e, k, v,\r\n          i = 0,\r\n          c = [],\r\n          rand = new BigNumber(ONE);\r\n\r\n        if (dp == null) dp = DECIMAL_PLACES;\r\n        else intCheck(dp, 0, MAX);\r\n\r\n        k = mathceil(dp / LOG_BASE);\r\n\r\n        if (CRYPTO) {\r\n\r\n          // Browsers supporting crypto.getRandomValues.\r\n          if (crypto.getRandomValues) {\r\n\r\n            a = crypto.getRandomValues(new Uint32Array(k *= 2));\r\n\r\n            for (; i < k;) {\r\n\r\n              // 53 bits:\r\n              // ((Math.pow(2, 32) - 1) * Math.pow(2, 21)).toString(2)\r\n              // 11111 11111111 11111111 11111111 11100000 00000000 00000000\r\n              // ((Math.pow(2, 32) - 1) >>> 11).toString(2)\r\n              //                                     11111 11111111 11111111\r\n              // 0x20000 is 2^21.\r\n              v = a[i] * 0x20000 + (a[i + 1] >>> 11);\r\n\r\n              // Rejection sampling:\r\n              // 0 <= v < 9007199254740992\r\n              // Probability that v >= 9e15, is\r\n              // 7199254740992 / 9007199254740992 ~= 0.0008, i.e. 1 in 1251\r\n              if (v >= 9e15) {\r\n                b = crypto.getRandomValues(new Uint32Array(2));\r\n                a[i] = b[0];\r\n                a[i + 1] = b[1];\r\n              } else {\r\n\r\n                // 0 <= v <= 8999999999999999\r\n                // 0 <= (v % 1e14) <= 99999999999999\r\n                c.push(v % 1e14);\r\n                i += 2;\r\n              }\r\n            }\r\n            i = k / 2;\r\n\r\n          // Node.js supporting crypto.randomBytes.\r\n          } else if (crypto.randomBytes) {\r\n\r\n            // buffer\r\n            a = crypto.randomBytes(k *= 7);\r\n\r\n            for (; i < k;) {\r\n\r\n              // 0x1000000000000 is 2^48, 0x10000000000 is 2^40\r\n              // 0x100000000 is 2^32, 0x1000000 is 2^24\r\n              // 11111 11111111 11111111 11111111 11111111 11111111 11111111\r\n              // 0 <= v < 9007199254740992\r\n              v = ((a[i] & 31) * 0x1000000000000) + (a[i + 1] * 0x10000000000) +\r\n                 (a[i + 2] * 0x100000000) + (a[i + 3] * 0x1000000) +\r\n                 (a[i + 4] << 16) + (a[i + 5] << 8) + a[i + 6];\r\n\r\n              if (v >= 9e15) {\r\n                crypto.randomBytes(7).copy(a, i);\r\n              } else {\r\n\r\n                // 0 <= (v % 1e14) <= 99999999999999\r\n                c.push(v % 1e14);\r\n                i += 7;\r\n              }\r\n            }\r\n            i = k / 7;\r\n          } else {\r\n            CRYPTO = false;\r\n            throw Error\r\n             (bignumberError + 'crypto unavailable');\r\n          }\r\n        }\r\n\r\n        // Use Math.random.\r\n        if (!CRYPTO) {\r\n\r\n          for (; i < k;) {\r\n            v = random53bitInt();\r\n            if (v < 9e15) c[i++] = v % 1e14;\r\n          }\r\n        }\r\n\r\n        k = c[--i];\r\n        dp %= LOG_BASE;\r\n\r\n        // Convert trailing digits to zeros according to dp.\r\n        if (k && dp) {\r\n          v = POWS_TEN[LOG_BASE - dp];\r\n          c[i] = mathfloor(k / v) * v;\r\n        }\r\n\r\n        // Remove trailing elements which are zero.\r\n        for (; c[i] === 0; c.pop(), i--);\r\n\r\n        // Zero?\r\n        if (i < 0) {\r\n          c = [e = 0];\r\n        } else {\r\n\r\n          // Remove leading elements which are zero and adjust exponent accordingly.\r\n          for (e = -1 ; c[0] === 0; c.splice(0, 1), e -= LOG_BASE);\r\n\r\n          // Count the digits of the first element of c to determine leading zeros, and...\r\n          for (i = 1, v = c[0]; v >= 10; v /= 10, i++);\r\n\r\n          // adjust the exponent accordingly.\r\n          if (i < LOG_BASE) e -= LOG_BASE - i;\r\n        }\r\n\r\n        rand.e = e;\r\n        rand.c = c;\r\n        return rand;\r\n      };\r\n    })();\r\n\r\n\r\n    /*\r\n     * Return a BigNumber whose value is the sum of the arguments.\r\n     *\r\n     * arguments {number|string|BigNumber}\r\n     */\r\n    BigNumber.sum = function () {\r\n      var i = 1,\r\n        args = arguments,\r\n        sum = new BigNumber(args[0]);\r\n      for (; i < args.length;) sum = sum.plus(args[i++]);\r\n      return sum;\r\n    };\r\n\r\n\r\n    // PRIVATE FUNCTIONS\r\n\r\n\r\n    // Called by BigNumber and BigNumber.prototype.toString.\r\n    convertBase = (function () {\r\n      var decimal = '0123456789';\r\n\r\n      /*\r\n       * Convert string of baseIn to an array of numbers of baseOut.\r\n       * Eg. toBaseOut('255', 10, 16) returns [15, 15].\r\n       * Eg. toBaseOut('ff', 16, 10) returns [2, 5, 5].\r\n       */\r\n      function toBaseOut(str, baseIn, baseOut, alphabet) {\r\n        var j,\r\n          arr = [0],\r\n          arrL,\r\n          i = 0,\r\n          len = str.length;\r\n\r\n        for (; i < len;) {\r\n          for (arrL = arr.length; arrL--; arr[arrL] *= baseIn);\r\n\r\n          arr[0] += alphabet.indexOf(str.charAt(i++));\r\n\r\n          for (j = 0; j < arr.length; j++) {\r\n\r\n            if (arr[j] > baseOut - 1) {\r\n              if (arr[j + 1] == null) arr[j + 1] = 0;\r\n              arr[j + 1] += arr[j] / baseOut | 0;\r\n              arr[j] %= baseOut;\r\n            }\r\n          }\r\n        }\r\n\r\n        return arr.reverse();\r\n      }\r\n\r\n      // Convert a numeric string of baseIn to a numeric string of baseOut.\r\n      // If the caller is toString, we are converting from base 10 to baseOut.\r\n      // If the caller is BigNumber, we are converting from baseIn to base 10.\r\n      return function (str, baseIn, baseOut, sign, callerIsToString) {\r\n        var alphabet, d, e, k, r, x, xc, y,\r\n          i = str.indexOf('.'),\r\n          dp = DECIMAL_PLACES,\r\n          rm = ROUNDING_MODE;\r\n\r\n        // Non-integer.\r\n        if (i >= 0) {\r\n          k = POW_PRECISION;\r\n\r\n          // Unlimited precision.\r\n          POW_PRECISION = 0;\r\n          str = str.replace('.', '');\r\n          y = new BigNumber(baseIn);\r\n          x = y.pow(str.length - i);\r\n          POW_PRECISION = k;\r\n\r\n          // Convert str as if an integer, then restore the fraction part by dividing the\r\n          // result by its base raised to a power.\r\n\r\n          y.c = toBaseOut(toFixedPoint(coeffToString(x.c), x.e, '0'),\r\n           10, baseOut, decimal);\r\n          y.e = y.c.length;\r\n        }\r\n\r\n        // Convert the number as integer.\r\n\r\n        xc = toBaseOut(str, baseIn, baseOut, callerIsToString\r\n         ? (alphabet = ALPHABET, decimal)\r\n         : (alphabet = decimal, ALPHABET));\r\n\r\n        // xc now represents str as an integer and converted to baseOut. e is the exponent.\r\n        e = k = xc.length;\r\n\r\n        // Remove trailing zeros.\r\n        for (; xc[--k] == 0; xc.pop());\r\n\r\n        // Zero?\r\n        if (!xc[0]) return alphabet.charAt(0);\r\n\r\n        // Does str represent an integer? If so, no need for the division.\r\n        if (i < 0) {\r\n          --e;\r\n        } else {\r\n          x.c = xc;\r\n          x.e = e;\r\n\r\n          // The sign is needed for correct rounding.\r\n          x.s = sign;\r\n          x = div(x, y, dp, rm, baseOut);\r\n          xc = x.c;\r\n          r = x.r;\r\n          e = x.e;\r\n        }\r\n\r\n        // xc now represents str converted to baseOut.\r\n\r\n        // THe index of the rounding digit.\r\n        d = e + dp + 1;\r\n\r\n        // The rounding digit: the digit to the right of the digit that may be rounded up.\r\n        i = xc[d];\r\n\r\n        // Look at the rounding digits and mode to determine whether to round up.\r\n\r\n        k = baseOut / 2;\r\n        r = r || d < 0 || xc[d + 1] != null;\r\n\r\n        r = rm < 4 ? (i != null || r) && (rm == 0 || rm == (x.s < 0 ? 3 : 2))\r\n              : i > k || i == k &&(rm == 4 || r || rm == 6 && xc[d - 1] & 1 ||\r\n               rm == (x.s < 0 ? 8 : 7));\r\n\r\n        // If the index of the rounding digit is not greater than zero, or xc represents\r\n        // zero, then the result of the base conversion is zero or, if rounding up, a value\r\n        // such as 0.00001.\r\n        if (d < 1 || !xc[0]) {\r\n\r\n          // 1^-dp or 0\r\n          str = r ? toFixedPoint(alphabet.charAt(1), -dp, alphabet.charAt(0)) : alphabet.charAt(0);\r\n        } else {\r\n\r\n          // Truncate xc to the required number of decimal places.\r\n          xc.length = d;\r\n\r\n          // Round up?\r\n          if (r) {\r\n\r\n            // Rounding up may mean the previous digit has to be rounded up and so on.\r\n            for (--baseOut; ++xc[--d] > baseOut;) {\r\n              xc[d] = 0;\r\n\r\n              if (!d) {\r\n                ++e;\r\n                xc = [1].concat(xc);\r\n              }\r\n            }\r\n          }\r\n\r\n          // Determine trailing zeros.\r\n          for (k = xc.length; !xc[--k];);\r\n\r\n          // E.g. [4, 11, 15] becomes 4bf.\r\n          for (i = 0, str = ''; i <= k; str += alphabet.charAt(xc[i++]));\r\n\r\n          // Add leading zeros, decimal point and trailing zeros as required.\r\n          str = toFixedPoint(str, e, alphabet.charAt(0));\r\n        }\r\n\r\n        // The caller will add the sign.\r\n        return str;\r\n      };\r\n    })();\r\n\r\n\r\n    // Perform division in the specified base. Called by div and convertBase.\r\n    div = (function () {\r\n\r\n      // Assume non-zero x and k.\r\n      function multiply(x, k, base) {\r\n        var m, temp, xlo, xhi,\r\n          carry = 0,\r\n          i = x.length,\r\n          klo = k % SQRT_BASE,\r\n          khi = k / SQRT_BASE | 0;\r\n\r\n        for (x = x.slice(); i--;) {\r\n          xlo = x[i] % SQRT_BASE;\r\n          xhi = x[i] / SQRT_BASE | 0;\r\n          m = khi * xlo + xhi * klo;\r\n          temp = klo * xlo + ((m % SQRT_BASE) * SQRT_BASE) + carry;\r\n          carry = (temp / base | 0) + (m / SQRT_BASE | 0) + khi * xhi;\r\n          x[i] = temp % base;\r\n        }\r\n\r\n        if (carry) x = [carry].concat(x);\r\n\r\n        return x;\r\n      }\r\n\r\n      function compare(a, b, aL, bL) {\r\n        var i, cmp;\r\n\r\n        if (aL != bL) {\r\n          cmp = aL > bL ? 1 : -1;\r\n        } else {\r\n\r\n          for (i = cmp = 0; i < aL; i++) {\r\n\r\n            if (a[i] != b[i]) {\r\n              cmp = a[i] > b[i] ? 1 : -1;\r\n              break;\r\n            }\r\n          }\r\n        }\r\n\r\n        return cmp;\r\n      }\r\n\r\n      function subtract(a, b, aL, base) {\r\n        var i = 0;\r\n\r\n        // Subtract b from a.\r\n        for (; aL--;) {\r\n          a[aL] -= i;\r\n          i = a[aL] < b[aL] ? 1 : 0;\r\n          a[aL] = i * base + a[aL] - b[aL];\r\n        }\r\n\r\n        // Remove leading zeros.\r\n        for (; !a[0] && a.length > 1; a.splice(0, 1));\r\n      }\r\n\r\n      // x: dividend, y: divisor.\r\n      return function (x, y, dp, rm, base) {\r\n        var cmp, e, i, more, n, prod, prodL, q, qc, rem, remL, rem0, xi, xL, yc0,\r\n          yL, yz,\r\n          s = x.s == y.s ? 1 : -1,\r\n          xc = x.c,\r\n          yc = y.c;\r\n\r\n        // Either NaN, Infinity or 0?\r\n        if (!xc || !xc[0] || !yc || !yc[0]) {\r\n\r\n          return new BigNumber(\r\n\r\n           // Return NaN if either NaN, or both Infinity or 0.\r\n           !x.s || !y.s || (xc ? yc && xc[0] == yc[0] : !yc) ? NaN :\r\n\r\n            // Return ±0 if x is ±0 or y is ±Infinity, or return ±Infinity as y is ±0.\r\n            xc && xc[0] == 0 || !yc ? s * 0 : s / 0\r\n         );\r\n        }\r\n\r\n        q = new BigNumber(s);\r\n        qc = q.c = [];\r\n        e = x.e - y.e;\r\n        s = dp + e + 1;\r\n\r\n        if (!base) {\r\n          base = BASE;\r\n          e = bitFloor(x.e / LOG_BASE) - bitFloor(y.e / LOG_BASE);\r\n          s = s / LOG_BASE | 0;\r\n        }\r\n\r\n        // Result exponent may be one less then the current value of e.\r\n        // The coefficients of the BigNumbers from convertBase may have trailing zeros.\r\n        for (i = 0; yc[i] == (xc[i] || 0); i++);\r\n\r\n        if (yc[i] > (xc[i] || 0)) e--;\r\n\r\n        if (s < 0) {\r\n          qc.push(1);\r\n          more = true;\r\n        } else {\r\n          xL = xc.length;\r\n          yL = yc.length;\r\n          i = 0;\r\n          s += 2;\r\n\r\n          // Normalise xc and yc so highest order digit of yc is >= base / 2.\r\n\r\n          n = mathfloor(base / (yc[0] + 1));\r\n\r\n          // Not necessary, but to handle odd bases where yc[0] == (base / 2) - 1.\r\n          // if (n > 1 || n++ == 1 && yc[0] < base / 2) {\r\n          if (n > 1) {\r\n            yc = multiply(yc, n, base);\r\n            xc = multiply(xc, n, base);\r\n            yL = yc.length;\r\n            xL = xc.length;\r\n          }\r\n\r\n          xi = yL;\r\n          rem = xc.slice(0, yL);\r\n          remL = rem.length;\r\n\r\n          // Add zeros to make remainder as long as divisor.\r\n          for (; remL < yL; rem[remL++] = 0);\r\n          yz = yc.slice();\r\n          yz = [0].concat(yz);\r\n          yc0 = yc[0];\r\n          if (yc[1] >= base / 2) yc0++;\r\n          // Not necessary, but to prevent trial digit n > base, when using base 3.\r\n          // else if (base == 3 && yc0 == 1) yc0 = 1 + 1e-15;\r\n\r\n          do {\r\n            n = 0;\r\n\r\n            // Compare divisor and remainder.\r\n            cmp = compare(yc, rem, yL, remL);\r\n\r\n            // If divisor < remainder.\r\n            if (cmp < 0) {\r\n\r\n              // Calculate trial digit, n.\r\n\r\n              rem0 = rem[0];\r\n              if (yL != remL) rem0 = rem0 * base + (rem[1] || 0);\r\n\r\n              // n is how many times the divisor goes into the current remainder.\r\n              n = mathfloor(rem0 / yc0);\r\n\r\n              //  Algorithm:\r\n              //  product = divisor multiplied by trial digit (n).\r\n              //  Compare product and remainder.\r\n              //  If product is greater than remainder:\r\n              //    Subtract divisor from product, decrement trial digit.\r\n              //  Subtract product from remainder.\r\n              //  If product was less than remainder at the last compare:\r\n              //    Compare new remainder and divisor.\r\n              //    If remainder is greater than divisor:\r\n              //      Subtract divisor from remainder, increment trial digit.\r\n\r\n              if (n > 1) {\r\n\r\n                // n may be > base only when base is 3.\r\n                if (n >= base) n = base - 1;\r\n\r\n                // product = divisor * trial digit.\r\n                prod = multiply(yc, n, base);\r\n                prodL = prod.length;\r\n                remL = rem.length;\r\n\r\n                // Compare product and remainder.\r\n                // If product > remainder then trial digit n too high.\r\n                // n is 1 too high about 5% of the time, and is not known to have\r\n                // ever been more than 1 too high.\r\n                while (compare(prod, rem, prodL, remL) == 1) {\r\n                  n--;\r\n\r\n                  // Subtract divisor from product.\r\n                  subtract(prod, yL < prodL ? yz : yc, prodL, base);\r\n                  prodL = prod.length;\r\n                  cmp = 1;\r\n                }\r\n              } else {\r\n\r\n                // n is 0 or 1, cmp is -1.\r\n                // If n is 0, there is no need to compare yc and rem again below,\r\n                // so change cmp to 1 to avoid it.\r\n                // If n is 1, leave cmp as -1, so yc and rem are compared again.\r\n                if (n == 0) {\r\n\r\n                  // divisor < remainder, so n must be at least 1.\r\n                  cmp = n = 1;\r\n                }\r\n\r\n                // product = divisor\r\n                prod = yc.slice();\r\n                prodL = prod.length;\r\n              }\r\n\r\n              if (prodL < remL) prod = [0].concat(prod);\r\n\r\n              // Subtract product from remainder.\r\n              subtract(rem, prod, remL, base);\r\n              remL = rem.length;\r\n\r\n               // If product was < remainder.\r\n              if (cmp == -1) {\r\n\r\n                // Compare divisor and new remainder.\r\n                // If divisor < new remainder, subtract divisor from remainder.\r\n                // Trial digit n too low.\r\n                // n is 1 too low about 5% of the time, and very rarely 2 too low.\r\n                while (compare(yc, rem, yL, remL) < 1) {\r\n                  n++;\r\n\r\n                  // Subtract divisor from remainder.\r\n                  subtract(rem, yL < remL ? yz : yc, remL, base);\r\n                  remL = rem.length;\r\n                }\r\n              }\r\n            } else if (cmp === 0) {\r\n              n++;\r\n              rem = [0];\r\n            } // else cmp === 1 and n will be 0\r\n\r\n            // Add the next digit, n, to the result array.\r\n            qc[i++] = n;\r\n\r\n            // Update the remainder.\r\n            if (rem[0]) {\r\n              rem[remL++] = xc[xi] || 0;\r\n            } else {\r\n              rem = [xc[xi]];\r\n              remL = 1;\r\n            }\r\n          } while ((xi++ < xL || rem[0] != null) && s--);\r\n\r\n          more = rem[0] != null;\r\n\r\n          // Leading zero?\r\n          if (!qc[0]) qc.splice(0, 1);\r\n        }\r\n\r\n        if (base == BASE) {\r\n\r\n          // To calculate q.e, first get the number of digits of qc[0].\r\n          for (i = 1, s = qc[0]; s >= 10; s /= 10, i++);\r\n\r\n          round(q, dp + (q.e = i + e * LOG_BASE - 1) + 1, rm, more);\r\n\r\n        // Caller is convertBase.\r\n        } else {\r\n          q.e = e;\r\n          q.r = +more;\r\n        }\r\n\r\n        return q;\r\n      };\r\n    })();\r\n\r\n\r\n    /*\r\n     * Return a string representing the value of BigNumber n in fixed-point or exponential\r\n     * notation rounded to the specified decimal places or significant digits.\r\n     *\r\n     * n: a BigNumber.\r\n     * i: the index of the last digit required (i.e. the digit that may be rounded up).\r\n     * rm: the rounding mode.\r\n     * id: 1 (toExponential) or 2 (toPrecision).\r\n     */\r\n    function format(n, i, rm, id) {\r\n      var c0, e, ne, len, str;\r\n\r\n      if (rm == null) rm = ROUNDING_MODE;\r\n      else intCheck(rm, 0, 8);\r\n\r\n      if (!n.c) return n.toString();\r\n\r\n      c0 = n.c[0];\r\n      ne = n.e;\r\n\r\n      if (i == null) {\r\n        str = coeffToString(n.c);\r\n        str = id == 1 || id == 2 && (ne <= TO_EXP_NEG || ne >= TO_EXP_POS)\r\n         ? toExponential(str, ne)\r\n         : toFixedPoint(str, ne, '0');\r\n      } else {\r\n        n = round(new BigNumber(n), i, rm);\r\n\r\n        // n.e may have changed if the value was rounded up.\r\n        e = n.e;\r\n\r\n        str = coeffToString(n.c);\r\n        len = str.length;\r\n\r\n        // toPrecision returns exponential notation if the number of significant digits\r\n        // specified is less than the number of digits necessary to represent the integer\r\n        // part of the value in fixed-point notation.\r\n\r\n        // Exponential notation.\r\n        if (id == 1 || id == 2 && (i <= e || e <= TO_EXP_NEG)) {\r\n\r\n          // Append zeros?\r\n          for (; len < i; str += '0', len++);\r\n          str = toExponential(str, e);\r\n\r\n        // Fixed-point notation.\r\n        } else {\r\n          i -= ne;\r\n          str = toFixedPoint(str, e, '0');\r\n\r\n          // Append zeros?\r\n          if (e + 1 > len) {\r\n            if (--i > 0) for (str += '.'; i--; str += '0');\r\n          } else {\r\n            i += e - len;\r\n            if (i > 0) {\r\n              if (e + 1 == len) str += '.';\r\n              for (; i--; str += '0');\r\n            }\r\n          }\r\n        }\r\n      }\r\n\r\n      return n.s < 0 && c0 ? '-' + str : str;\r\n    }\r\n\r\n\r\n    // Handle BigNumber.max and BigNumber.min.\r\n    function maxOrMin(args, method) {\r\n      var n,\r\n        i = 1,\r\n        m = new BigNumber(args[0]);\r\n\r\n      for (; i < args.length; i++) {\r\n        n = new BigNumber(args[i]);\r\n\r\n        // If any number is NaN, return NaN.\r\n        if (!n.s) {\r\n          m = n;\r\n          break;\r\n        } else if (method.call(m, n)) {\r\n          m = n;\r\n        }\r\n      }\r\n\r\n      return m;\r\n    }\r\n\r\n\r\n    /*\r\n     * Strip trailing zeros, calculate base 10 exponent and check against MIN_EXP and MAX_EXP.\r\n     * Called by minus, plus and times.\r\n     */\r\n    function normalise(n, c, e) {\r\n      var i = 1,\r\n        j = c.length;\r\n\r\n       // Remove trailing zeros.\r\n      for (; !c[--j]; c.pop());\r\n\r\n      // Calculate the base 10 exponent. First get the number of digits of c[0].\r\n      for (j = c[0]; j >= 10; j /= 10, i++);\r\n\r\n      // Overflow?\r\n      if ((e = i + e * LOG_BASE - 1) > MAX_EXP) {\r\n\r\n        // Infinity.\r\n        n.c = n.e = null;\r\n\r\n      // Underflow?\r\n      } else if (e < MIN_EXP) {\r\n\r\n        // Zero.\r\n        n.c = [n.e = 0];\r\n      } else {\r\n        n.e = e;\r\n        n.c = c;\r\n      }\r\n\r\n      return n;\r\n    }\r\n\r\n\r\n    // Handle values that fail the validity test in BigNumber.\r\n    parseNumeric = (function () {\r\n      var basePrefix = /^(-?)0([xbo])(?=\\w[\\w.]*$)/i,\r\n        dotAfter = /^([^.]+)\\.$/,\r\n        dotBefore = /^\\.([^.]+)$/,\r\n        isInfinityOrNaN = /^-?(Infinity|NaN)$/,\r\n        whitespaceOrPlus = /^\\s*\\+(?=[\\w.])|^\\s+|\\s+$/g;\r\n\r\n      return function (x, str, isNum, b) {\r\n        var base,\r\n          s = isNum ? str : str.replace(whitespaceOrPlus, '');\r\n\r\n        // No exception on ±Infinity or NaN.\r\n        if (isInfinityOrNaN.test(s)) {\r\n          x.s = isNaN(s) ? null : s < 0 ? -1 : 1;\r\n        } else {\r\n          if (!isNum) {\r\n\r\n            // basePrefix = /^(-?)0([xbo])(?=\\w[\\w.]*$)/i\r\n            s = s.replace(basePrefix, function (m, p1, p2) {\r\n              base = (p2 = p2.toLowerCase()) == 'x' ? 16 : p2 == 'b' ? 2 : 8;\r\n              return !b || b == base ? p1 : m;\r\n            });\r\n\r\n            if (b) {\r\n              base = b;\r\n\r\n              // E.g. '1.' to '1', '.1' to '0.1'\r\n              s = s.replace(dotAfter, '$1').replace(dotBefore, '0.$1');\r\n            }\r\n\r\n            if (str != s) return new BigNumber(s, base);\r\n          }\r\n\r\n          // '[BigNumber Error] Not a number: {n}'\r\n          // '[BigNumber Error] Not a base {b} number: {n}'\r\n          if (BigNumber.DEBUG) {\r\n            throw Error\r\n              (bignumberError + 'Not a' + (b ? ' base ' + b : '') + ' number: ' + str);\r\n          }\r\n\r\n          // NaN\r\n          x.s = null;\r\n        }\r\n\r\n        x.c = x.e = null;\r\n      }\r\n    })();\r\n\r\n\r\n    /*\r\n     * Round x to sd significant digits using rounding mode rm. Check for over/under-flow.\r\n     * If r is truthy, it is known that there are more digits after the rounding digit.\r\n     */\r\n    function round(x, sd, rm, r) {\r\n      var d, i, j, k, n, ni, rd,\r\n        xc = x.c,\r\n        pows10 = POWS_TEN;\r\n\r\n      // if x is not Infinity or NaN...\r\n      if (xc) {\r\n\r\n        // rd is the rounding digit, i.e. the digit after the digit that may be rounded up.\r\n        // n is a base 1e14 number, the value of the element of array x.c containing rd.\r\n        // ni is the index of n within x.c.\r\n        // d is the number of digits of n.\r\n        // i is the index of rd within n including leading zeros.\r\n        // j is the actual index of rd within n (if < 0, rd is a leading zero).\r\n        out: {\r\n\r\n          // Get the number of digits of the first element of xc.\r\n          for (d = 1, k = xc[0]; k >= 10; k /= 10, d++);\r\n          i = sd - d;\r\n\r\n          // If the rounding digit is in the first element of xc...\r\n          if (i < 0) {\r\n            i += LOG_BASE;\r\n            j = sd;\r\n            n = xc[ni = 0];\r\n\r\n            // Get the rounding digit at index j of n.\r\n            rd = n / pows10[d - j - 1] % 10 | 0;\r\n          } else {\r\n            ni = mathceil((i + 1) / LOG_BASE);\r\n\r\n            if (ni >= xc.length) {\r\n\r\n              if (r) {\r\n\r\n                // Needed by sqrt.\r\n                for (; xc.length <= ni; xc.push(0));\r\n                n = rd = 0;\r\n                d = 1;\r\n                i %= LOG_BASE;\r\n                j = i - LOG_BASE + 1;\r\n              } else {\r\n                break out;\r\n              }\r\n            } else {\r\n              n = k = xc[ni];\r\n\r\n              // Get the number of digits of n.\r\n              for (d = 1; k >= 10; k /= 10, d++);\r\n\r\n              // Get the index of rd within n.\r\n              i %= LOG_BASE;\r\n\r\n              // Get the index of rd within n, adjusted for leading zeros.\r\n              // The number of leading zeros of n is given by LOG_BASE - d.\r\n              j = i - LOG_BASE + d;\r\n\r\n              // Get the rounding digit at index j of n.\r\n              rd = j < 0 ? 0 : n / pows10[d - j - 1] % 10 | 0;\r\n            }\r\n          }\r\n\r\n          r = r || sd < 0 ||\r\n\r\n          // Are there any non-zero digits after the rounding digit?\r\n          // The expression  n % pows10[d - j - 1]  returns all digits of n to the right\r\n          // of the digit at j, e.g. if n is 908714 and j is 2, the expression gives 714.\r\n           xc[ni + 1] != null || (j < 0 ? n : n % pows10[d - j - 1]);\r\n\r\n          r = rm < 4\r\n           ? (rd || r) && (rm == 0 || rm == (x.s < 0 ? 3 : 2))\r\n           : rd > 5 || rd == 5 && (rm == 4 || r || rm == 6 &&\r\n\r\n            // Check whether the digit to the left of the rounding digit is odd.\r\n            ((i > 0 ? j > 0 ? n / pows10[d - j] : 0 : xc[ni - 1]) % 10) & 1 ||\r\n             rm == (x.s < 0 ? 8 : 7));\r\n\r\n          if (sd < 1 || !xc[0]) {\r\n            xc.length = 0;\r\n\r\n            if (r) {\r\n\r\n              // Convert sd to decimal places.\r\n              sd -= x.e + 1;\r\n\r\n              // 1, 0.1, 0.01, 0.001, 0.0001 etc.\r\n              xc[0] = pows10[(LOG_BASE - sd % LOG_BASE) % LOG_BASE];\r\n              x.e = -sd || 0;\r\n            } else {\r\n\r\n              // Zero.\r\n              xc[0] = x.e = 0;\r\n            }\r\n\r\n            return x;\r\n          }\r\n\r\n          // Remove excess digits.\r\n          if (i == 0) {\r\n            xc.length = ni;\r\n            k = 1;\r\n            ni--;\r\n          } else {\r\n            xc.length = ni + 1;\r\n            k = pows10[LOG_BASE - i];\r\n\r\n            // E.g. 56700 becomes 56000 if 7 is the rounding digit.\r\n            // j > 0 means i > number of leading zeros of n.\r\n            xc[ni] = j > 0 ? mathfloor(n / pows10[d - j] % pows10[j]) * k : 0;\r\n          }\r\n\r\n          // Round up?\r\n          if (r) {\r\n\r\n            for (; ;) {\r\n\r\n              // If the digit to be rounded up is in the first element of xc...\r\n              if (ni == 0) {\r\n\r\n                // i will be the length of xc[0] before k is added.\r\n                for (i = 1, j = xc[0]; j >= 10; j /= 10, i++);\r\n                j = xc[0] += k;\r\n                for (k = 1; j >= 10; j /= 10, k++);\r\n\r\n                // if i != k the length has increased.\r\n                if (i != k) {\r\n                  x.e++;\r\n                  if (xc[0] == BASE) xc[0] = 1;\r\n                }\r\n\r\n                break;\r\n              } else {\r\n                xc[ni] += k;\r\n                if (xc[ni] != BASE) break;\r\n                xc[ni--] = 0;\r\n                k = 1;\r\n              }\r\n            }\r\n          }\r\n\r\n          // Remove trailing zeros.\r\n          for (i = xc.length; xc[--i] === 0; xc.pop());\r\n        }\r\n\r\n        // Overflow? Infinity.\r\n        if (x.e > MAX_EXP) {\r\n          x.c = x.e = null;\r\n\r\n        // Underflow? Zero.\r\n        } else if (x.e < MIN_EXP) {\r\n          x.c = [x.e = 0];\r\n        }\r\n      }\r\n\r\n      return x;\r\n    }\r\n\r\n\r\n    function valueOf(n) {\r\n      var str,\r\n        e = n.e;\r\n\r\n      if (e === null) return n.toString();\r\n\r\n      str = coeffToString(n.c);\r\n\r\n      str = e <= TO_EXP_NEG || e >= TO_EXP_POS\r\n        ? toExponential(str, e)\r\n        : toFixedPoint(str, e, '0');\r\n\r\n      return n.s < 0 ? '-' + str : str;\r\n    }\r\n\r\n\r\n    // PROTOTYPE/INSTANCE METHODS\r\n\r\n\r\n    /*\r\n     * Return a new BigNumber whose value is the absolute value of this BigNumber.\r\n     */\r\n    P.absoluteValue = P.abs = function () {\r\n      var x = new BigNumber(this);\r\n      if (x.s < 0) x.s = 1;\r\n      return x;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return\r\n     *   1 if the value of this BigNumber is greater than the value of BigNumber(y, b),\r\n     *   -1 if the value of this BigNumber is less than the value of BigNumber(y, b),\r\n     *   0 if they have the same value,\r\n     *   or null if the value of either is NaN.\r\n     */\r\n    P.comparedTo = function (y, b) {\r\n      return compare(this, new BigNumber(y, b));\r\n    };\r\n\r\n\r\n    /*\r\n     * If dp is undefined or null or true or false, return the number of decimal places of the\r\n     * value of this BigNumber, or null if the value of this BigNumber is ±Infinity or NaN.\r\n     *\r\n     * Otherwise, if dp is a number, return a new BigNumber whose value is the value of this\r\n     * BigNumber rounded to a maximum of dp decimal places using rounding mode rm, or\r\n     * ROUNDING_MODE if rm is omitted.\r\n     *\r\n     * [dp] {number} Decimal places: integer, 0 to MAX inclusive.\r\n     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'\r\n     */\r\n    P.decimalPlaces = P.dp = function (dp, rm) {\r\n      var c, n, v,\r\n        x = this;\r\n\r\n      if (dp != null) {\r\n        intCheck(dp, 0, MAX);\r\n        if (rm == null) rm = ROUNDING_MODE;\r\n        else intCheck(rm, 0, 8);\r\n\r\n        return round(new BigNumber(x), dp + x.e + 1, rm);\r\n      }\r\n\r\n      if (!(c = x.c)) return null;\r\n      n = ((v = c.length - 1) - bitFloor(this.e / LOG_BASE)) * LOG_BASE;\r\n\r\n      // Subtract the number of trailing zeros of the last number.\r\n      if (v = c[v]) for (; v % 10 == 0; v /= 10, n--);\r\n      if (n < 0) n = 0;\r\n\r\n      return n;\r\n    };\r\n\r\n\r\n    /*\r\n     *  n / 0 = I\r\n     *  n / N = N\r\n     *  n / I = 0\r\n     *  0 / n = 0\r\n     *  0 / 0 = N\r\n     *  0 / N = N\r\n     *  0 / I = 0\r\n     *  N / n = N\r\n     *  N / 0 = N\r\n     *  N / N = N\r\n     *  N / I = N\r\n     *  I / n = I\r\n     *  I / 0 = I\r\n     *  I / N = N\r\n     *  I / I = N\r\n     *\r\n     * Return a new BigNumber whose value is the value of this BigNumber divided by the value of\r\n     * BigNumber(y, b), rounded according to DECIMAL_PLACES and ROUNDING_MODE.\r\n     */\r\n    P.dividedBy = P.div = function (y, b) {\r\n      return div(this, new BigNumber(y, b), DECIMAL_PLACES, ROUNDING_MODE);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a new BigNumber whose value is the integer part of dividing the value of this\r\n     * BigNumber by the value of BigNumber(y, b).\r\n     */\r\n    P.dividedToIntegerBy = P.idiv = function (y, b) {\r\n      return div(this, new BigNumber(y, b), 0, 1);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a BigNumber whose value is the value of this BigNumber exponentiated by n.\r\n     *\r\n     * If m is present, return the result modulo m.\r\n     * If n is negative round according to DECIMAL_PLACES and ROUNDING_MODE.\r\n     * If POW_PRECISION is non-zero and m is not present, round to POW_PRECISION using ROUNDING_MODE.\r\n     *\r\n     * The modular power operation works efficiently when x, n, and m are integers, otherwise it\r\n     * is equivalent to calculating x.exponentiatedBy(n).modulo(m) with a POW_PRECISION of 0.\r\n     *\r\n     * n {number|string|BigNumber} The exponent. An integer.\r\n     * [m] {number|string|BigNumber} The modulus.\r\n     *\r\n     * '[BigNumber Error] Exponent not an integer: {n}'\r\n     */\r\n    P.exponentiatedBy = P.pow = function (n, m) {\r\n      var half, isModExp, i, k, more, nIsBig, nIsNeg, nIsOdd, y,\r\n        x = this;\r\n\r\n      n = new BigNumber(n);\r\n\r\n      // Allow NaN and ±Infinity, but not other non-integers.\r\n      if (n.c && !n.isInteger()) {\r\n        throw Error\r\n          (bignumberError + 'Exponent not an integer: ' + valueOf(n));\r\n      }\r\n\r\n      if (m != null) m = new BigNumber(m);\r\n\r\n      // Exponent of MAX_SAFE_INTEGER is 15.\r\n      nIsBig = n.e > 14;\r\n\r\n      // If x is NaN, ±Infinity, ±0 or ±1, or n is ±Infinity, NaN or ±0.\r\n      if (!x.c || !x.c[0] || x.c[0] == 1 && !x.e && x.c.length == 1 || !n.c || !n.c[0]) {\r\n\r\n        // The sign of the result of pow when x is negative depends on the evenness of n.\r\n        // If +n overflows to ±Infinity, the evenness of n would be not be known.\r\n        y = new BigNumber(Math.pow(+valueOf(x), nIsBig ? 2 - isOdd(n) : +valueOf(n)));\r\n        return m ? y.mod(m) : y;\r\n      }\r\n\r\n      nIsNeg = n.s < 0;\r\n\r\n      if (m) {\r\n\r\n        // x % m returns NaN if abs(m) is zero, or m is NaN.\r\n        if (m.c ? !m.c[0] : !m.s) return new BigNumber(NaN);\r\n\r\n        isModExp = !nIsNeg && x.isInteger() && m.isInteger();\r\n\r\n        if (isModExp) x = x.mod(m);\r\n\r\n      // Overflow to ±Infinity: >=2**1e10 or >=1.0000024**1e15.\r\n      // Underflow to ±0: <=0.79**1e10 or <=0.9999975**1e15.\r\n      } else if (n.e > 9 && (x.e > 0 || x.e < -1 || (x.e == 0\r\n        // [1, 240000000]\r\n        ? x.c[0] > 1 || nIsBig && x.c[1] >= 24e7\r\n        // [80000000000000]  [99999750000000]\r\n        : x.c[0] < 8e13 || nIsBig && x.c[0] <= 9999975e7))) {\r\n\r\n        // If x is negative and n is odd, k = -0, else k = 0.\r\n        k = x.s < 0 && isOdd(n) ? -0 : 0;\r\n\r\n        // If x >= 1, k = ±Infinity.\r\n        if (x.e > -1) k = 1 / k;\r\n\r\n        // If n is negative return ±0, else return ±Infinity.\r\n        return new BigNumber(nIsNeg ? 1 / k : k);\r\n\r\n      } else if (POW_PRECISION) {\r\n\r\n        // Truncating each coefficient array to a length of k after each multiplication\r\n        // equates to truncating significant digits to POW_PRECISION + [28, 41],\r\n        // i.e. there will be a minimum of 28 guard digits retained.\r\n        k = mathceil(POW_PRECISION / LOG_BASE + 2);\r\n      }\r\n\r\n      if (nIsBig) {\r\n        half = new BigNumber(0.5);\r\n        if (nIsNeg) n.s = 1;\r\n        nIsOdd = isOdd(n);\r\n      } else {\r\n        i = Math.abs(+valueOf(n));\r\n        nIsOdd = i % 2;\r\n      }\r\n\r\n      y = new BigNumber(ONE);\r\n\r\n      // Performs 54 loop iterations for n of 9007199254740991.\r\n      for (; ;) {\r\n\r\n        if (nIsOdd) {\r\n          y = y.times(x);\r\n          if (!y.c) break;\r\n\r\n          if (k) {\r\n            if (y.c.length > k) y.c.length = k;\r\n          } else if (isModExp) {\r\n            y = y.mod(m);    //y = y.minus(div(y, m, 0, MODULO_MODE).times(m));\r\n          }\r\n        }\r\n\r\n        if (i) {\r\n          i = mathfloor(i / 2);\r\n          if (i === 0) break;\r\n          nIsOdd = i % 2;\r\n        } else {\r\n          n = n.times(half);\r\n          round(n, n.e + 1, 1);\r\n\r\n          if (n.e > 14) {\r\n            nIsOdd = isOdd(n);\r\n          } else {\r\n            i = +valueOf(n);\r\n            if (i === 0) break;\r\n            nIsOdd = i % 2;\r\n          }\r\n        }\r\n\r\n        x = x.times(x);\r\n\r\n        if (k) {\r\n          if (x.c && x.c.length > k) x.c.length = k;\r\n        } else if (isModExp) {\r\n          x = x.mod(m);    //x = x.minus(div(x, m, 0, MODULO_MODE).times(m));\r\n        }\r\n      }\r\n\r\n      if (isModExp) return y;\r\n      if (nIsNeg) y = ONE.div(y);\r\n\r\n      return m ? y.mod(m) : k ? round(y, POW_PRECISION, ROUNDING_MODE, more) : y;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a new BigNumber whose value is the value of this BigNumber rounded to an integer\r\n     * using rounding mode rm, or ROUNDING_MODE if rm is omitted.\r\n     *\r\n     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {rm}'\r\n     */\r\n    P.integerValue = function (rm) {\r\n      var n = new BigNumber(this);\r\n      if (rm == null) rm = ROUNDING_MODE;\r\n      else intCheck(rm, 0, 8);\r\n      return round(n, n.e + 1, rm);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is equal to the value of BigNumber(y, b),\r\n     * otherwise return false.\r\n     */\r\n    P.isEqualTo = P.eq = function (y, b) {\r\n      return compare(this, new BigNumber(y, b)) === 0;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is a finite number, otherwise return false.\r\n     */\r\n    P.isFinite = function () {\r\n      return !!this.c;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is greater than the value of BigNumber(y, b),\r\n     * otherwise return false.\r\n     */\r\n    P.isGreaterThan = P.gt = function (y, b) {\r\n      return compare(this, new BigNumber(y, b)) > 0;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is greater than or equal to the value of\r\n     * BigNumber(y, b), otherwise return false.\r\n     */\r\n    P.isGreaterThanOrEqualTo = P.gte = function (y, b) {\r\n      return (b = compare(this, new BigNumber(y, b))) === 1 || b === 0;\r\n\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is an integer, otherwise return false.\r\n     */\r\n    P.isInteger = function () {\r\n      return !!this.c && bitFloor(this.e / LOG_BASE) > this.c.length - 2;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is less than the value of BigNumber(y, b),\r\n     * otherwise return false.\r\n     */\r\n    P.isLessThan = P.lt = function (y, b) {\r\n      return compare(this, new BigNumber(y, b)) < 0;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is less than or equal to the value of\r\n     * BigNumber(y, b), otherwise return false.\r\n     */\r\n    P.isLessThanOrEqualTo = P.lte = function (y, b) {\r\n      return (b = compare(this, new BigNumber(y, b))) === -1 || b === 0;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is NaN, otherwise return false.\r\n     */\r\n    P.isNaN = function () {\r\n      return !this.s;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is negative, otherwise return false.\r\n     */\r\n    P.isNegative = function () {\r\n      return this.s < 0;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is positive, otherwise return false.\r\n     */\r\n    P.isPositive = function () {\r\n      return this.s > 0;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is 0 or -0, otherwise return false.\r\n     */\r\n    P.isZero = function () {\r\n      return !!this.c && this.c[0] == 0;\r\n    };\r\n\r\n\r\n    /*\r\n     *  n - 0 = n\r\n     *  n - N = N\r\n     *  n - I = -I\r\n     *  0 - n = -n\r\n     *  0 - 0 = 0\r\n     *  0 - N = N\r\n     *  0 - I = -I\r\n     *  N - n = N\r\n     *  N - 0 = N\r\n     *  N - N = N\r\n     *  N - I = N\r\n     *  I - n = I\r\n     *  I - 0 = I\r\n     *  I - N = N\r\n     *  I - I = N\r\n     *\r\n     * Return a new BigNumber whose value is the value of this BigNumber minus the value of\r\n     * BigNumber(y, b).\r\n     */\r\n    P.minus = function (y, b) {\r\n      var i, j, t, xLTy,\r\n        x = this,\r\n        a = x.s;\r\n\r\n      y = new BigNumber(y, b);\r\n      b = y.s;\r\n\r\n      // Either NaN?\r\n      if (!a || !b) return new BigNumber(NaN);\r\n\r\n      // Signs differ?\r\n      if (a != b) {\r\n        y.s = -b;\r\n        return x.plus(y);\r\n      }\r\n\r\n      var xe = x.e / LOG_BASE,\r\n        ye = y.e / LOG_BASE,\r\n        xc = x.c,\r\n        yc = y.c;\r\n\r\n      if (!xe || !ye) {\r\n\r\n        // Either Infinity?\r\n        if (!xc || !yc) return xc ? (y.s = -b, y) : new BigNumber(yc ? x : NaN);\r\n\r\n        // Either zero?\r\n        if (!xc[0] || !yc[0]) {\r\n\r\n          // Return y if y is non-zero, x if x is non-zero, or zero if both are zero.\r\n          return yc[0] ? (y.s = -b, y) : new BigNumber(xc[0] ? x :\r\n\r\n           // IEEE 754 (2008) 6.3: n - n = -0 when rounding to -Infinity\r\n           ROUNDING_MODE == 3 ? -0 : 0);\r\n        }\r\n      }\r\n\r\n      xe = bitFloor(xe);\r\n      ye = bitFloor(ye);\r\n      xc = xc.slice();\r\n\r\n      // Determine which is the bigger number.\r\n      if (a = xe - ye) {\r\n\r\n        if (xLTy = a < 0) {\r\n          a = -a;\r\n          t = xc;\r\n        } else {\r\n          ye = xe;\r\n          t = yc;\r\n        }\r\n\r\n        t.reverse();\r\n\r\n        // Prepend zeros to equalise exponents.\r\n        for (b = a; b--; t.push(0));\r\n        t.reverse();\r\n      } else {\r\n\r\n        // Exponents equal. Check digit by digit.\r\n        j = (xLTy = (a = xc.length) < (b = yc.length)) ? a : b;\r\n\r\n        for (a = b = 0; b < j; b++) {\r\n\r\n          if (xc[b] != yc[b]) {\r\n            xLTy = xc[b] < yc[b];\r\n            break;\r\n          }\r\n        }\r\n      }\r\n\r\n      // x < y? Point xc to the array of the bigger number.\r\n      if (xLTy) t = xc, xc = yc, yc = t, y.s = -y.s;\r\n\r\n      b = (j = yc.length) - (i = xc.length);\r\n\r\n      // Append zeros to xc if shorter.\r\n      // No need to add zeros to yc if shorter as subtract only needs to start at yc.length.\r\n      if (b > 0) for (; b--; xc[i++] = 0);\r\n      b = BASE - 1;\r\n\r\n      // Subtract yc from xc.\r\n      for (; j > a;) {\r\n\r\n        if (xc[--j] < yc[j]) {\r\n          for (i = j; i && !xc[--i]; xc[i] = b);\r\n          --xc[i];\r\n          xc[j] += BASE;\r\n        }\r\n\r\n        xc[j] -= yc[j];\r\n      }\r\n\r\n      // Remove leading zeros and adjust exponent accordingly.\r\n      for (; xc[0] == 0; xc.splice(0, 1), --ye);\r\n\r\n      // Zero?\r\n      if (!xc[0]) {\r\n\r\n        // Following IEEE 754 (2008) 6.3,\r\n        // n - n = +0  but  n - n = -0  when rounding towards -Infinity.\r\n        y.s = ROUNDING_MODE == 3 ? -1 : 1;\r\n        y.c = [y.e = 0];\r\n        return y;\r\n      }\r\n\r\n      // No need to check for Infinity as +x - +y != Infinity && -x - -y != Infinity\r\n      // for finite x and y.\r\n      return normalise(y, xc, ye);\r\n    };\r\n\r\n\r\n    /*\r\n     *   n % 0 =  N\r\n     *   n % N =  N\r\n     *   n % I =  n\r\n     *   0 % n =  0\r\n     *  -0 % n = -0\r\n     *   0 % 0 =  N\r\n     *   0 % N =  N\r\n     *   0 % I =  0\r\n     *   N % n =  N\r\n     *   N % 0 =  N\r\n     *   N % N =  N\r\n     *   N % I =  N\r\n     *   I % n =  N\r\n     *   I % 0 =  N\r\n     *   I % N =  N\r\n     *   I % I =  N\r\n     *\r\n     * Return a new BigNumber whose value is the value of this BigNumber modulo the value of\r\n     * BigNumber(y, b). The result depends on the value of MODULO_MODE.\r\n     */\r\n    P.modulo = P.mod = function (y, b) {\r\n      var q, s,\r\n        x = this;\r\n\r\n      y = new BigNumber(y, b);\r\n\r\n      // Return NaN if x is Infinity or NaN, or y is NaN or zero.\r\n      if (!x.c || !y.s || y.c && !y.c[0]) {\r\n        return new BigNumber(NaN);\r\n\r\n      // Return x if y is Infinity or x is zero.\r\n      } else if (!y.c || x.c && !x.c[0]) {\r\n        return new BigNumber(x);\r\n      }\r\n\r\n      if (MODULO_MODE == 9) {\r\n\r\n        // Euclidian division: q = sign(y) * floor(x / abs(y))\r\n        // r = x - qy    where  0 <= r < abs(y)\r\n        s = y.s;\r\n        y.s = 1;\r\n        q = div(x, y, 0, 3);\r\n        y.s = s;\r\n        q.s *= s;\r\n      } else {\r\n        q = div(x, y, 0, MODULO_MODE);\r\n      }\r\n\r\n      y = x.minus(q.times(y));\r\n\r\n      // To match JavaScript %, ensure sign of zero is sign of dividend.\r\n      if (!y.c[0] && MODULO_MODE == 1) y.s = x.s;\r\n\r\n      return y;\r\n    };\r\n\r\n\r\n    /*\r\n     *  n * 0 = 0\r\n     *  n * N = N\r\n     *  n * I = I\r\n     *  0 * n = 0\r\n     *  0 * 0 = 0\r\n     *  0 * N = N\r\n     *  0 * I = N\r\n     *  N * n = N\r\n     *  N * 0 = N\r\n     *  N * N = N\r\n     *  N * I = N\r\n     *  I * n = I\r\n     *  I * 0 = N\r\n     *  I * N = N\r\n     *  I * I = I\r\n     *\r\n     * Return a new BigNumber whose value is the value of this BigNumber multiplied by the value\r\n     * of BigNumber(y, b).\r\n     */\r\n    P.multipliedBy = P.times = function (y, b) {\r\n      var c, e, i, j, k, m, xcL, xlo, xhi, ycL, ylo, yhi, zc,\r\n        base, sqrtBase,\r\n        x = this,\r\n        xc = x.c,\r\n        yc = (y = new BigNumber(y, b)).c;\r\n\r\n      // Either NaN, ±Infinity or ±0?\r\n      if (!xc || !yc || !xc[0] || !yc[0]) {\r\n\r\n        // Return NaN if either is NaN, or one is 0 and the other is Infinity.\r\n        if (!x.s || !y.s || xc && !xc[0] && !yc || yc && !yc[0] && !xc) {\r\n          y.c = y.e = y.s = null;\r\n        } else {\r\n          y.s *= x.s;\r\n\r\n          // Return ±Infinity if either is ±Infinity.\r\n          if (!xc || !yc) {\r\n            y.c = y.e = null;\r\n\r\n          // Return ±0 if either is ±0.\r\n          } else {\r\n            y.c = [0];\r\n            y.e = 0;\r\n          }\r\n        }\r\n\r\n        return y;\r\n      }\r\n\r\n      e = bitFloor(x.e / LOG_BASE) + bitFloor(y.e / LOG_BASE);\r\n      y.s *= x.s;\r\n      xcL = xc.length;\r\n      ycL = yc.length;\r\n\r\n      // Ensure xc points to longer array and xcL to its length.\r\n      if (xcL < ycL) zc = xc, xc = yc, yc = zc, i = xcL, xcL = ycL, ycL = i;\r\n\r\n      // Initialise the result array with zeros.\r\n      for (i = xcL + ycL, zc = []; i--; zc.push(0));\r\n\r\n      base = BASE;\r\n      sqrtBase = SQRT_BASE;\r\n\r\n      for (i = ycL; --i >= 0;) {\r\n        c = 0;\r\n        ylo = yc[i] % sqrtBase;\r\n        yhi = yc[i] / sqrtBase | 0;\r\n\r\n        for (k = xcL, j = i + k; j > i;) {\r\n          xlo = xc[--k] % sqrtBase;\r\n          xhi = xc[k] / sqrtBase | 0;\r\n          m = yhi * xlo + xhi * ylo;\r\n          xlo = ylo * xlo + ((m % sqrtBase) * sqrtBase) + zc[j] + c;\r\n          c = (xlo / base | 0) + (m / sqrtBase | 0) + yhi * xhi;\r\n          zc[j--] = xlo % base;\r\n        }\r\n\r\n        zc[j] = c;\r\n      }\r\n\r\n      if (c) {\r\n        ++e;\r\n      } else {\r\n        zc.splice(0, 1);\r\n      }\r\n\r\n      return normalise(y, zc, e);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a new BigNumber whose value is the value of this BigNumber negated,\r\n     * i.e. multiplied by -1.\r\n     */\r\n    P.negated = function () {\r\n      var x = new BigNumber(this);\r\n      x.s = -x.s || null;\r\n      return x;\r\n    };\r\n\r\n\r\n    /*\r\n     *  n + 0 = n\r\n     *  n + N = N\r\n     *  n + I = I\r\n     *  0 + n = n\r\n     *  0 + 0 = 0\r\n     *  0 + N = N\r\n     *  0 + I = I\r\n     *  N + n = N\r\n     *  N + 0 = N\r\n     *  N + N = N\r\n     *  N + I = N\r\n     *  I + n = I\r\n     *  I + 0 = I\r\n     *  I + N = N\r\n     *  I + I = I\r\n     *\r\n     * Return a new BigNumber whose value is the value of this BigNumber plus the value of\r\n     * BigNumber(y, b).\r\n     */\r\n    P.plus = function (y, b) {\r\n      var t,\r\n        x = this,\r\n        a = x.s;\r\n\r\n      y = new BigNumber(y, b);\r\n      b = y.s;\r\n\r\n      // Either NaN?\r\n      if (!a || !b) return new BigNumber(NaN);\r\n\r\n      // Signs differ?\r\n       if (a != b) {\r\n        y.s = -b;\r\n        return x.minus(y);\r\n      }\r\n\r\n      var xe = x.e / LOG_BASE,\r\n        ye = y.e / LOG_BASE,\r\n        xc = x.c,\r\n        yc = y.c;\r\n\r\n      if (!xe || !ye) {\r\n\r\n        // Return ±Infinity if either ±Infinity.\r\n        if (!xc || !yc) return new BigNumber(a / 0);\r\n\r\n        // Either zero?\r\n        // Return y if y is non-zero, x if x is non-zero, or zero if both are zero.\r\n        if (!xc[0] || !yc[0]) return yc[0] ? y : new BigNumber(xc[0] ? x : a * 0);\r\n      }\r\n\r\n      xe = bitFloor(xe);\r\n      ye = bitFloor(ye);\r\n      xc = xc.slice();\r\n\r\n      // Prepend zeros to equalise exponents. Faster to use reverse then do unshifts.\r\n      if (a = xe - ye) {\r\n        if (a > 0) {\r\n          ye = xe;\r\n          t = yc;\r\n        } else {\r\n          a = -a;\r\n          t = xc;\r\n        }\r\n\r\n        t.reverse();\r\n        for (; a--; t.push(0));\r\n        t.reverse();\r\n      }\r\n\r\n      a = xc.length;\r\n      b = yc.length;\r\n\r\n      // Point xc to the longer array, and b to the shorter length.\r\n      if (a - b < 0) t = yc, yc = xc, xc = t, b = a;\r\n\r\n      // Only start adding at yc.length - 1 as the further digits of xc can be ignored.\r\n      for (a = 0; b;) {\r\n        a = (xc[--b] = xc[b] + yc[b] + a) / BASE | 0;\r\n        xc[b] = BASE === xc[b] ? 0 : xc[b] % BASE;\r\n      }\r\n\r\n      if (a) {\r\n        xc = [a].concat(xc);\r\n        ++ye;\r\n      }\r\n\r\n      // No need to check for zero, as +x + +y != 0 && -x + -y != 0\r\n      // ye = MAX_EXP + 1 possible\r\n      return normalise(y, xc, ye);\r\n    };\r\n\r\n\r\n    /*\r\n     * If sd is undefined or null or true or false, return the number of significant digits of\r\n     * the value of this BigNumber, or null if the value of this BigNumber is ±Infinity or NaN.\r\n     * If sd is true include integer-part trailing zeros in the count.\r\n     *\r\n     * Otherwise, if sd is a number, return a new BigNumber whose value is the value of this\r\n     * BigNumber rounded to a maximum of sd significant digits using rounding mode rm, or\r\n     * ROUNDING_MODE if rm is omitted.\r\n     *\r\n     * sd {number|boolean} number: significant digits: integer, 1 to MAX inclusive.\r\n     *                     boolean: whether to count integer-part trailing zeros: true or false.\r\n     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {sd|rm}'\r\n     */\r\n    P.precision = P.sd = function (sd, rm) {\r\n      var c, n, v,\r\n        x = this;\r\n\r\n      if (sd != null && sd !== !!sd) {\r\n        intCheck(sd, 1, MAX);\r\n        if (rm == null) rm = ROUNDING_MODE;\r\n        else intCheck(rm, 0, 8);\r\n\r\n        return round(new BigNumber(x), sd, rm);\r\n      }\r\n\r\n      if (!(c = x.c)) return null;\r\n      v = c.length - 1;\r\n      n = v * LOG_BASE + 1;\r\n\r\n      if (v = c[v]) {\r\n\r\n        // Subtract the number of trailing zeros of the last element.\r\n        for (; v % 10 == 0; v /= 10, n--);\r\n\r\n        // Add the number of digits of the first element.\r\n        for (v = c[0]; v >= 10; v /= 10, n++);\r\n      }\r\n\r\n      if (sd && x.e + 1 > n) n = x.e + 1;\r\n\r\n      return n;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a new BigNumber whose value is the value of this BigNumber shifted by k places\r\n     * (powers of 10). Shift to the right if n > 0, and to the left if n < 0.\r\n     *\r\n     * k {number} Integer, -MAX_SAFE_INTEGER to MAX_SAFE_INTEGER inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {k}'\r\n     */\r\n    P.shiftedBy = function (k) {\r\n      intCheck(k, -MAX_SAFE_INTEGER, MAX_SAFE_INTEGER);\r\n      return this.times('1e' + k);\r\n    };\r\n\r\n\r\n    /*\r\n     *  sqrt(-n) =  N\r\n     *  sqrt(N) =  N\r\n     *  sqrt(-I) =  N\r\n     *  sqrt(I) =  I\r\n     *  sqrt(0) =  0\r\n     *  sqrt(-0) = -0\r\n     *\r\n     * Return a new BigNumber whose value is the square root of the value of this BigNumber,\r\n     * rounded according to DECIMAL_PLACES and ROUNDING_MODE.\r\n     */\r\n    P.squareRoot = P.sqrt = function () {\r\n      var m, n, r, rep, t,\r\n        x = this,\r\n        c = x.c,\r\n        s = x.s,\r\n        e = x.e,\r\n        dp = DECIMAL_PLACES + 4,\r\n        half = new BigNumber('0.5');\r\n\r\n      // Negative/NaN/Infinity/zero?\r\n      if (s !== 1 || !c || !c[0]) {\r\n        return new BigNumber(!s || s < 0 && (!c || c[0]) ? NaN : c ? x : 1 / 0);\r\n      }\r\n\r\n      // Initial estimate.\r\n      s = Math.sqrt(+valueOf(x));\r\n\r\n      // Math.sqrt underflow/overflow?\r\n      // Pass x to Math.sqrt as integer, then adjust the exponent of the result.\r\n      if (s == 0 || s == 1 / 0) {\r\n        n = coeffToString(c);\r\n        if ((n.length + e) % 2 == 0) n += '0';\r\n        s = Math.sqrt(+n);\r\n        e = bitFloor((e + 1) / 2) - (e < 0 || e % 2);\r\n\r\n        if (s == 1 / 0) {\r\n          n = '1e' + e;\r\n        } else {\r\n          n = s.toExponential();\r\n          n = n.slice(0, n.indexOf('e') + 1) + e;\r\n        }\r\n\r\n        r = new BigNumber(n);\r\n      } else {\r\n        r = new BigNumber(s + '');\r\n      }\r\n\r\n      // Check for zero.\r\n      // r could be zero if MIN_EXP is changed after the this value was created.\r\n      // This would cause a division by zero (x/t) and hence Infinity below, which would cause\r\n      // coeffToString to throw.\r\n      if (r.c[0]) {\r\n        e = r.e;\r\n        s = e + dp;\r\n        if (s < 3) s = 0;\r\n\r\n        // Newton-Raphson iteration.\r\n        for (; ;) {\r\n          t = r;\r\n          r = half.times(t.plus(div(x, t, dp, 1)));\r\n\r\n          if (coeffToString(t.c).slice(0, s) === (n = coeffToString(r.c)).slice(0, s)) {\r\n\r\n            // The exponent of r may here be one less than the final result exponent,\r\n            // e.g 0.0009999 (e-4) --> 0.001 (e-3), so adjust s so the rounding digits\r\n            // are indexed correctly.\r\n            if (r.e < e) --s;\r\n            n = n.slice(s - 3, s + 1);\r\n\r\n            // The 4th rounding digit may be in error by -1 so if the 4 rounding digits\r\n            // are 9999 or 4999 (i.e. approaching a rounding boundary) continue the\r\n            // iteration.\r\n            if (n == '9999' || !rep && n == '4999') {\r\n\r\n              // On the first iteration only, check to see if rounding up gives the\r\n              // exact result as the nines may infinitely repeat.\r\n              if (!rep) {\r\n                round(t, t.e + DECIMAL_PLACES + 2, 0);\r\n\r\n                if (t.times(t).eq(x)) {\r\n                  r = t;\r\n                  break;\r\n                }\r\n              }\r\n\r\n              dp += 4;\r\n              s += 4;\r\n              rep = 1;\r\n            } else {\r\n\r\n              // If rounding digits are null, 0{0,4} or 50{0,3}, check for exact\r\n              // result. If not, then there are further digits and m will be truthy.\r\n              if (!+n || !+n.slice(1) && n.charAt(0) == '5') {\r\n\r\n                // Truncate to the first rounding digit.\r\n                round(r, r.e + DECIMAL_PLACES + 2, 1);\r\n                m = !r.times(r).eq(x);\r\n              }\r\n\r\n              break;\r\n            }\r\n          }\r\n        }\r\n      }\r\n\r\n      return round(r, r.e + DECIMAL_PLACES + 1, ROUNDING_MODE, m);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a string representing the value of this BigNumber in exponential notation and\r\n     * rounded using ROUNDING_MODE to dp fixed decimal places.\r\n     *\r\n     * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.\r\n     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'\r\n     */\r\n    P.toExponential = function (dp, rm) {\r\n      if (dp != null) {\r\n        intCheck(dp, 0, MAX);\r\n        dp++;\r\n      }\r\n      return format(this, dp, rm, 1);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a string representing the value of this BigNumber in fixed-point notation rounding\r\n     * to dp fixed decimal places using rounding mode rm, or ROUNDING_MODE if rm is omitted.\r\n     *\r\n     * Note: as with JavaScript's number type, (-0).toFixed(0) is '0',\r\n     * but e.g. (-0.00001).toFixed(0) is '-0'.\r\n     *\r\n     * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.\r\n     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'\r\n     */\r\n    P.toFixed = function (dp, rm) {\r\n      if (dp != null) {\r\n        intCheck(dp, 0, MAX);\r\n        dp = dp + this.e + 1;\r\n      }\r\n      return format(this, dp, rm);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a string representing the value of this BigNumber in fixed-point notation rounded\r\n     * using rm or ROUNDING_MODE to dp decimal places, and formatted according to the properties\r\n     * of the format or FORMAT object (see BigNumber.set).\r\n     *\r\n     * The formatting object may contain some or all of the properties shown below.\r\n     *\r\n     * FORMAT = {\r\n     *   prefix: '',\r\n     *   groupSize: 3,\r\n     *   secondaryGroupSize: 0,\r\n     *   groupSeparator: ',',\r\n     *   decimalSeparator: '.',\r\n     *   fractionGroupSize: 0,\r\n     *   fractionGroupSeparator: '\\xA0',      // non-breaking space\r\n     *   suffix: ''\r\n     * };\r\n     *\r\n     * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.\r\n     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n     * [format] {object} Formatting options. See FORMAT pbject above.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'\r\n     * '[BigNumber Error] Argument not an object: {format}'\r\n     */\r\n    P.toFormat = function (dp, rm, format) {\r\n      var str,\r\n        x = this;\r\n\r\n      if (format == null) {\r\n        if (dp != null && rm && typeof rm == 'object') {\r\n          format = rm;\r\n          rm = null;\r\n        } else if (dp && typeof dp == 'object') {\r\n          format = dp;\r\n          dp = rm = null;\r\n        } else {\r\n          format = FORMAT;\r\n        }\r\n      } else if (typeof format != 'object') {\r\n        throw Error\r\n          (bignumberError + 'Argument not an object: ' + format);\r\n      }\r\n\r\n      str = x.toFixed(dp, rm);\r\n\r\n      if (x.c) {\r\n        var i,\r\n          arr = str.split('.'),\r\n          g1 = +format.groupSize,\r\n          g2 = +format.secondaryGroupSize,\r\n          groupSeparator = format.groupSeparator || '',\r\n          intPart = arr[0],\r\n          fractionPart = arr[1],\r\n          isNeg = x.s < 0,\r\n          intDigits = isNeg ? intPart.slice(1) : intPart,\r\n          len = intDigits.length;\r\n\r\n        if (g2) i = g1, g1 = g2, g2 = i, len -= i;\r\n\r\n        if (g1 > 0 && len > 0) {\r\n          i = len % g1 || g1;\r\n          intPart = intDigits.substr(0, i);\r\n          for (; i < len; i += g1) intPart += groupSeparator + intDigits.substr(i, g1);\r\n          if (g2 > 0) intPart += groupSeparator + intDigits.slice(i);\r\n          if (isNeg) intPart = '-' + intPart;\r\n        }\r\n\r\n        str = fractionPart\r\n         ? intPart + (format.decimalSeparator || '') + ((g2 = +format.fractionGroupSize)\r\n          ? fractionPart.replace(new RegExp('\\\\d{' + g2 + '}\\\\B', 'g'),\r\n           '$&' + (format.fractionGroupSeparator || ''))\r\n          : fractionPart)\r\n         : intPart;\r\n      }\r\n\r\n      return (format.prefix || '') + str + (format.suffix || '');\r\n    };\r\n\r\n\r\n    /*\r\n     * Return an array of two BigNumbers representing the value of this BigNumber as a simple\r\n     * fraction with an integer numerator and an integer denominator.\r\n     * The denominator will be a positive non-zero value less than or equal to the specified\r\n     * maximum denominator. If a maximum denominator is not specified, the denominator will be\r\n     * the lowest value necessary to represent the number exactly.\r\n     *\r\n     * [md] {number|string|BigNumber} Integer >= 1, or Infinity. The maximum denominator.\r\n     *\r\n     * '[BigNumber Error] Argument {not an integer|out of range} : {md}'\r\n     */\r\n    P.toFraction = function (md) {\r\n      var d, d0, d1, d2, e, exp, n, n0, n1, q, r, s,\r\n        x = this,\r\n        xc = x.c;\r\n\r\n      if (md != null) {\r\n        n = new BigNumber(md);\r\n\r\n        // Throw if md is less than one or is not an integer, unless it is Infinity.\r\n        if (!n.isInteger() && (n.c || n.s !== 1) || n.lt(ONE)) {\r\n          throw Error\r\n            (bignumberError + 'Argument ' +\r\n              (n.isInteger() ? 'out of range: ' : 'not an integer: ') + valueOf(n));\r\n        }\r\n      }\r\n\r\n      if (!xc) return new BigNumber(x);\r\n\r\n      d = new BigNumber(ONE);\r\n      n1 = d0 = new BigNumber(ONE);\r\n      d1 = n0 = new BigNumber(ONE);\r\n      s = coeffToString(xc);\r\n\r\n      // Determine initial denominator.\r\n      // d is a power of 10 and the minimum max denominator that specifies the value exactly.\r\n      e = d.e = s.length - x.e - 1;\r\n      d.c[0] = POWS_TEN[(exp = e % LOG_BASE) < 0 ? LOG_BASE + exp : exp];\r\n      md = !md || n.comparedTo(d) > 0 ? (e > 0 ? d : n1) : n;\r\n\r\n      exp = MAX_EXP;\r\n      MAX_EXP = 1 / 0;\r\n      n = new BigNumber(s);\r\n\r\n      // n0 = d1 = 0\r\n      n0.c[0] = 0;\r\n\r\n      for (; ;)  {\r\n        q = div(n, d, 0, 1);\r\n        d2 = d0.plus(q.times(d1));\r\n        if (d2.comparedTo(md) == 1) break;\r\n        d0 = d1;\r\n        d1 = d2;\r\n        n1 = n0.plus(q.times(d2 = n1));\r\n        n0 = d2;\r\n        d = n.minus(q.times(d2 = d));\r\n        n = d2;\r\n      }\r\n\r\n      d2 = div(md.minus(d0), d1, 0, 1);\r\n      n0 = n0.plus(d2.times(n1));\r\n      d0 = d0.plus(d2.times(d1));\r\n      n0.s = n1.s = x.s;\r\n      e = e * 2;\r\n\r\n      // Determine which fraction is closer to x, n0/d0 or n1/d1\r\n      r = div(n1, d1, e, ROUNDING_MODE).minus(x).abs().comparedTo(\r\n          div(n0, d0, e, ROUNDING_MODE).minus(x).abs()) < 1 ? [n1, d1] : [n0, d0];\r\n\r\n      MAX_EXP = exp;\r\n\r\n      return r;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return the value of this BigNumber converted to a number primitive.\r\n     */\r\n    P.toNumber = function () {\r\n      return +valueOf(this);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a string representing the value of this BigNumber rounded to sd significant digits\r\n     * using rounding mode rm or ROUNDING_MODE. If sd is less than the number of digits\r\n     * necessary to represent the integer part of the value in fixed-point notation, then use\r\n     * exponential notation.\r\n     *\r\n     * [sd] {number} Significant digits. Integer, 1 to MAX inclusive.\r\n     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {sd|rm}'\r\n     */\r\n    P.toPrecision = function (sd, rm) {\r\n      if (sd != null) intCheck(sd, 1, MAX);\r\n      return format(this, sd, rm, 2);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a string representing the value of this BigNumber in base b, or base 10 if b is\r\n     * omitted. If a base is specified, including base 10, round according to DECIMAL_PLACES and\r\n     * ROUNDING_MODE. If a base is not specified, and this BigNumber has a positive exponent\r\n     * that is equal to or greater than TO_EXP_POS, or a negative exponent equal to or less than\r\n     * TO_EXP_NEG, return exponential notation.\r\n     *\r\n     * [b] {number} Integer, 2 to ALPHABET.length inclusive.\r\n     *\r\n     * '[BigNumber Error] Base {not a primitive number|not an integer|out of range}: {b}'\r\n     */\r\n    P.toString = function (b) {\r\n      var str,\r\n        n = this,\r\n        s = n.s,\r\n        e = n.e;\r\n\r\n      // Infinity or NaN?\r\n      if (e === null) {\r\n        if (s) {\r\n          str = 'Infinity';\r\n          if (s < 0) str = '-' + str;\r\n        } else {\r\n          str = 'NaN';\r\n        }\r\n      } else {\r\n        if (b == null) {\r\n          str = e <= TO_EXP_NEG || e >= TO_EXP_POS\r\n           ? toExponential(coeffToString(n.c), e)\r\n           : toFixedPoint(coeffToString(n.c), e, '0');\r\n        } else if (b === 10) {\r\n          n = round(new BigNumber(n), DECIMAL_PLACES + e + 1, ROUNDING_MODE);\r\n          str = toFixedPoint(coeffToString(n.c), n.e, '0');\r\n        } else {\r\n          intCheck(b, 2, ALPHABET.length, 'Base');\r\n          str = convertBase(toFixedPoint(coeffToString(n.c), e, '0'), 10, b, s, true);\r\n        }\r\n\r\n        if (s < 0 && n.c[0]) str = '-' + str;\r\n      }\r\n\r\n      return str;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return as toString, but do not accept a base argument, and include the minus sign for\r\n     * negative zero.\r\n     */\r\n    P.valueOf = P.toJSON = function () {\r\n      return valueOf(this);\r\n    };\r\n\r\n\r\n    P._isBigNumber = true;\r\n\r\n    if (configObject != null) BigNumber.set(configObject);\r\n\r\n    return BigNumber;\r\n  }\r\n\r\n\r\n  // PRIVATE HELPER FUNCTIONS\r\n\r\n  // These functions don't need access to variables,\r\n  // e.g. DECIMAL_PLACES, in the scope of the `clone` function above.\r\n\r\n\r\n  function bitFloor(n) {\r\n    var i = n | 0;\r\n    return n > 0 || n === i ? i : i - 1;\r\n  }\r\n\r\n\r\n  // Return a coefficient array as a string of base 10 digits.\r\n  function coeffToString(a) {\r\n    var s, z,\r\n      i = 1,\r\n      j = a.length,\r\n      r = a[0] + '';\r\n\r\n    for (; i < j;) {\r\n      s = a[i++] + '';\r\n      z = LOG_BASE - s.length;\r\n      for (; z--; s = '0' + s);\r\n      r += s;\r\n    }\r\n\r\n    // Determine trailing zeros.\r\n    for (j = r.length; r.charCodeAt(--j) === 48;);\r\n\r\n    return r.slice(0, j + 1 || 1);\r\n  }\r\n\r\n\r\n  // Compare the value of BigNumbers x and y.\r\n  function compare(x, y) {\r\n    var a, b,\r\n      xc = x.c,\r\n      yc = y.c,\r\n      i = x.s,\r\n      j = y.s,\r\n      k = x.e,\r\n      l = y.e;\r\n\r\n    // Either NaN?\r\n    if (!i || !j) return null;\r\n\r\n    a = xc && !xc[0];\r\n    b = yc && !yc[0];\r\n\r\n    // Either zero?\r\n    if (a || b) return a ? b ? 0 : -j : i;\r\n\r\n    // Signs differ?\r\n    if (i != j) return i;\r\n\r\n    a = i < 0;\r\n    b = k == l;\r\n\r\n    // Either Infinity?\r\n    if (!xc || !yc) return b ? 0 : !xc ^ a ? 1 : -1;\r\n\r\n    // Compare exponents.\r\n    if (!b) return k > l ^ a ? 1 : -1;\r\n\r\n    j = (k = xc.length) < (l = yc.length) ? k : l;\r\n\r\n    // Compare digit by digit.\r\n    for (i = 0; i < j; i++) if (xc[i] != yc[i]) return xc[i] > yc[i] ^ a ? 1 : -1;\r\n\r\n    // Compare lengths.\r\n    return k == l ? 0 : k > l ^ a ? 1 : -1;\r\n  }\r\n\r\n\r\n  /*\r\n   * Check that n is a primitive number, an integer, and in range, otherwise throw.\r\n   */\r\n  function intCheck(n, min, max, name) {\r\n    if (n < min || n > max || n !== mathfloor(n)) {\r\n      throw Error\r\n       (bignumberError + (name || 'Argument') + (typeof n == 'number'\r\n         ? n < min || n > max ? ' out of range: ' : ' not an integer: '\r\n         : ' not a primitive number: ') + String(n));\r\n    }\r\n  }\r\n\r\n\r\n  // Assumes finite n.\r\n  function isOdd(n) {\r\n    var k = n.c.length - 1;\r\n    return bitFloor(n.e / LOG_BASE) == k && n.c[k] % 2 != 0;\r\n  }\r\n\r\n\r\n  function toExponential(str, e) {\r\n    return (str.length > 1 ? str.charAt(0) + '.' + str.slice(1) : str) +\r\n     (e < 0 ? 'e' : 'e+') + e;\r\n  }\r\n\r\n\r\n  function toFixedPoint(str, e, z) {\r\n    var len, zs;\r\n\r\n    // Negative exponent?\r\n    if (e < 0) {\r\n\r\n      // Prepend zeros.\r\n      for (zs = z + '.'; ++e; zs += z);\r\n      str = zs + str;\r\n\r\n    // Positive exponent\r\n    } else {\r\n      len = str.length;\r\n\r\n      // Append zeros.\r\n      if (++e > len) {\r\n        for (zs = z, e -= len; --e; zs += z);\r\n        str += zs;\r\n      } else if (e < len) {\r\n        str = str.slice(0, e) + '.' + str.slice(e);\r\n      }\r\n    }\r\n\r\n    return str;\r\n  }\r\n\r\n\r\n  // EXPORT\r\n\r\n\r\n  BigNumber = clone();\r\n  BigNumber['default'] = BigNumber.BigNumber = BigNumber;\r\n\r\n  // AMD.\r\n  if (typeof define == 'function' && define.amd) {\r\n    define(function () { return BigNumber; });\r\n\r\n  // Node.js and other environments that support module.exports.\r\n  } else if (typeof module != 'undefined' && module.exports) {\r\n    module.exports = BigNumber;\r\n\r\n  // Browser.\r\n  } else {\r\n    if (!globalObject) {\r\n      globalObject = typeof self != 'undefined' && self ? self : window;\r\n    }\r\n\r\n    globalObject.BigNumber = BigNumber;\r\n  }\r\n})(this);\r\n","/*!\n * The buffer module from node.js, for the browser.\n *\n * @author   Feross Aboukhadijeh <https://feross.org>\n * @license  MIT\n */\n/* eslint-disable no-proto */\n\n'use strict'\n\nvar base64 = require('base64-js')\nvar ieee754 = require('ieee754')\n\nexports.Buffer = Buffer\nexports.SlowBuffer = SlowBuffer\nexports.INSPECT_MAX_BYTES = 50\n\nvar K_MAX_LENGTH = 0x7fffffff\nexports.kMaxLength = K_MAX_LENGTH\n\n/**\n * If `Buffer.TYPED_ARRAY_SUPPORT`:\n *   === true    Use Uint8Array implementation (fastest)\n *   === false   Print warning and recommend using `buffer` v4.x which has an Object\n *               implementation (most compatible, even IE6)\n *\n * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,\n * Opera 11.6+, iOS 4.2+.\n *\n * We report that the browser does not support typed arrays if the are not subclassable\n * using __proto__. Firefox 4-29 lacks support for adding new properties to `Uint8Array`\n * (See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438). IE 10 lacks support\n * for __proto__ and has a buggy typed array implementation.\n */\nBuffer.TYPED_ARRAY_SUPPORT = typedArraySupport()\n\nif (!Buffer.TYPED_ARRAY_SUPPORT && typeof console !== 'undefined' &&\n    typeof console.error === 'function') {\n  console.error(\n    'This browser lacks typed array (Uint8Array) support which is required by ' +\n    '`buffer` v5.x. Use `buffer` v4.x if you require old browser support.'\n  )\n}\n\nfunction typedArraySupport () {\n  // Can typed array instances can be augmented?\n  try {\n    var arr = new Uint8Array(1)\n    arr.__proto__ = { __proto__: Uint8Array.prototype, foo: function () { return 42 } }\n    return arr.foo() === 42\n  } catch (e) {\n    return false\n  }\n}\n\nObject.defineProperty(Buffer.prototype, 'parent', {\n  enumerable: true,\n  get: function () {\n    if (!Buffer.isBuffer(this)) return undefined\n    return this.buffer\n  }\n})\n\nObject.defineProperty(Buffer.prototype, 'offset', {\n  enumerable: true,\n  get: function () {\n    if (!Buffer.isBuffer(this)) return undefined\n    return this.byteOffset\n  }\n})\n\nfunction createBuffer (length) {\n  if (length > K_MAX_LENGTH) {\n    throw new RangeError('The value \"' + length + '\" is invalid for option \"size\"')\n  }\n  // Return an augmented `Uint8Array` instance\n  var buf = new Uint8Array(length)\n  buf.__proto__ = Buffer.prototype\n  return buf\n}\n\n/**\n * The Buffer constructor returns instances of `Uint8Array` that have their\n * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of\n * `Uint8Array`, so the returned instances will have all the node `Buffer` methods\n * and the `Uint8Array` methods. Square bracket notation works as expected -- it\n * returns a single octet.\n *\n * The `Uint8Array` prototype remains unmodified.\n */\n\nfunction Buffer (arg, encodingOrOffset, length) {\n  // Common case.\n  if (typeof arg === 'number') {\n    if (typeof encodingOrOffset === 'string') {\n      throw new TypeError(\n        'The \"string\" argument must be of type string. Received type number'\n      )\n    }\n    return allocUnsafe(arg)\n  }\n  return from(arg, encodingOrOffset, length)\n}\n\n// Fix subarray() in ES2016. See: https://github.com/feross/buffer/pull/97\nif (typeof Symbol !== 'undefined' && Symbol.species != null &&\n    Buffer[Symbol.species] === Buffer) {\n  Object.defineProperty(Buffer, Symbol.species, {\n    value: null,\n    configurable: true,\n    enumerable: false,\n    writable: false\n  })\n}\n\nBuffer.poolSize = 8192 // not used by this implementation\n\nfunction from (value, encodingOrOffset, length) {\n  if (typeof value === 'string') {\n    return fromString(value, encodingOrOffset)\n  }\n\n  if (ArrayBuffer.isView(value)) {\n    return fromArrayLike(value)\n  }\n\n  if (value == null) {\n    throw TypeError(\n      'The first argument must be one of type string, Buffer, ArrayBuffer, Array, ' +\n      'or Array-like Object. Received type ' + (typeof value)\n    )\n  }\n\n  if (isInstance(value, ArrayBuffer) ||\n      (value && isInstance(value.buffer, ArrayBuffer))) {\n    return fromArrayBuffer(value, encodingOrOffset, length)\n  }\n\n  if (typeof value === 'number') {\n    throw new TypeError(\n      'The \"value\" argument must not be of type number. Received type number'\n    )\n  }\n\n  var valueOf = value.valueOf && value.valueOf()\n  if (valueOf != null && valueOf !== value) {\n    return Buffer.from(valueOf, encodingOrOffset, length)\n  }\n\n  var b = fromObject(value)\n  if (b) return b\n\n  if (typeof Symbol !== 'undefined' && Symbol.toPrimitive != null &&\n      typeof value[Symbol.toPrimitive] === 'function') {\n    return Buffer.from(\n      value[Symbol.toPrimitive]('string'), encodingOrOffset, length\n    )\n  }\n\n  throw new TypeError(\n    'The first argument must be one of type string, Buffer, ArrayBuffer, Array, ' +\n    'or Array-like Object. Received type ' + (typeof value)\n  )\n}\n\n/**\n * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError\n * if value is a number.\n * Buffer.from(str[, encoding])\n * Buffer.from(array)\n * Buffer.from(buffer)\n * Buffer.from(arrayBuffer[, byteOffset[, length]])\n **/\nBuffer.from = function (value, encodingOrOffset, length) {\n  return from(value, encodingOrOffset, length)\n}\n\n// Note: Change prototype *after* Buffer.from is defined to workaround Chrome bug:\n// https://github.com/feross/buffer/pull/148\nBuffer.prototype.__proto__ = Uint8Array.prototype\nBuffer.__proto__ = Uint8Array\n\nfunction assertSize (size) {\n  if (typeof size !== 'number') {\n    throw new TypeError('\"size\" argument must be of type number')\n  } else if (size < 0) {\n    throw new RangeError('The value \"' + size + '\" is invalid for option \"size\"')\n  }\n}\n\nfunction alloc (size, fill, encoding) {\n  assertSize(size)\n  if (size <= 0) {\n    return createBuffer(size)\n  }\n  if (fill !== undefined) {\n    // Only pay attention to encoding if it's a string. This\n    // prevents accidentally sending in a number that would\n    // be interpretted as a start offset.\n    return typeof encoding === 'string'\n      ? createBuffer(size).fill(fill, encoding)\n      : createBuffer(size).fill(fill)\n  }\n  return createBuffer(size)\n}\n\n/**\n * Creates a new filled Buffer instance.\n * alloc(size[, fill[, encoding]])\n **/\nBuffer.alloc = function (size, fill, encoding) {\n  return alloc(size, fill, encoding)\n}\n\nfunction allocUnsafe (size) {\n  assertSize(size)\n  return createBuffer(size < 0 ? 0 : checked(size) | 0)\n}\n\n/**\n * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.\n * */\nBuffer.allocUnsafe = function (size) {\n  return allocUnsafe(size)\n}\n/**\n * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.\n */\nBuffer.allocUnsafeSlow = function (size) {\n  return allocUnsafe(size)\n}\n\nfunction fromString (string, encoding) {\n  if (typeof encoding !== 'string' || encoding === '') {\n    encoding = 'utf8'\n  }\n\n  if (!Buffer.isEncoding(encoding)) {\n    throw new TypeError('Unknown encoding: ' + encoding)\n  }\n\n  var length = byteLength(string, encoding) | 0\n  var buf = createBuffer(length)\n\n  var actual = buf.write(string, encoding)\n\n  if (actual !== length) {\n    // Writing a hex string, for example, that contains invalid characters will\n    // cause everything after the first invalid character to be ignored. (e.g.\n    // 'abxxcd' will be treated as 'ab')\n    buf = buf.slice(0, actual)\n  }\n\n  return buf\n}\n\nfunction fromArrayLike (array) {\n  var length = array.length < 0 ? 0 : checked(array.length) | 0\n  var buf = createBuffer(length)\n  for (var i = 0; i < length; i += 1) {\n    buf[i] = array[i] & 255\n  }\n  return buf\n}\n\nfunction fromArrayBuffer (array, byteOffset, length) {\n  if (byteOffset < 0 || array.byteLength < byteOffset) {\n    throw new RangeError('\"offset\" is outside of buffer bounds')\n  }\n\n  if (array.byteLength < byteOffset + (length || 0)) {\n    throw new RangeError('\"length\" is outside of buffer bounds')\n  }\n\n  var buf\n  if (byteOffset === undefined && length === undefined) {\n    buf = new Uint8Array(array)\n  } else if (length === undefined) {\n    buf = new Uint8Array(array, byteOffset)\n  } else {\n    buf = new Uint8Array(array, byteOffset, length)\n  }\n\n  // Return an augmented `Uint8Array` instance\n  buf.__proto__ = Buffer.prototype\n  return buf\n}\n\nfunction fromObject (obj) {\n  if (Buffer.isBuffer(obj)) {\n    var len = checked(obj.length) | 0\n    var buf = createBuffer(len)\n\n    if (buf.length === 0) {\n      return buf\n    }\n\n    obj.copy(buf, 0, 0, len)\n    return buf\n  }\n\n  if (obj.length !== undefined) {\n    if (typeof obj.length !== 'number' || numberIsNaN(obj.length)) {\n      return createBuffer(0)\n    }\n    return fromArrayLike(obj)\n  }\n\n  if (obj.type === 'Buffer' && Array.isArray(obj.data)) {\n    return fromArrayLike(obj.data)\n  }\n}\n\nfunction checked (length) {\n  // Note: cannot use `length < K_MAX_LENGTH` here because that fails when\n  // length is NaN (which is otherwise coerced to zero.)\n  if (length >= K_MAX_LENGTH) {\n    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +\n                         'size: 0x' + K_MAX_LENGTH.toString(16) + ' bytes')\n  }\n  return length | 0\n}\n\nfunction SlowBuffer (length) {\n  if (+length != length) { // eslint-disable-line eqeqeq\n    length = 0\n  }\n  return Buffer.alloc(+length)\n}\n\nBuffer.isBuffer = function isBuffer (b) {\n  return b != null && b._isBuffer === true &&\n    b !== Buffer.prototype // so Buffer.isBuffer(Buffer.prototype) will be false\n}\n\nBuffer.compare = function compare (a, b) {\n  if (isInstance(a, Uint8Array)) a = Buffer.from(a, a.offset, a.byteLength)\n  if (isInstance(b, Uint8Array)) b = Buffer.from(b, b.offset, b.byteLength)\n  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {\n    throw new TypeError(\n      'The \"buf1\", \"buf2\" arguments must be one of type Buffer or Uint8Array'\n    )\n  }\n\n  if (a === b) return 0\n\n  var x = a.length\n  var y = b.length\n\n  for (var i = 0, len = Math.min(x, y); i < len; ++i) {\n    if (a[i] !== b[i]) {\n      x = a[i]\n      y = b[i]\n      break\n    }\n  }\n\n  if (x < y) return -1\n  if (y < x) return 1\n  return 0\n}\n\nBuffer.isEncoding = function isEncoding (encoding) {\n  switch (String(encoding).toLowerCase()) {\n    case 'hex':\n    case 'utf8':\n    case 'utf-8':\n    case 'ascii':\n    case 'latin1':\n    case 'binary':\n    case 'base64':\n    case 'ucs2':\n    case 'ucs-2':\n    case 'utf16le':\n    case 'utf-16le':\n      return true\n    default:\n      return false\n  }\n}\n\nBuffer.concat = function concat (list, length) {\n  if (!Array.isArray(list)) {\n    throw new TypeError('\"list\" argument must be an Array of Buffers')\n  }\n\n  if (list.length === 0) {\n    return Buffer.alloc(0)\n  }\n\n  var i\n  if (length === undefined) {\n    length = 0\n    for (i = 0; i < list.length; ++i) {\n      length += list[i].length\n    }\n  }\n\n  var buffer = Buffer.allocUnsafe(length)\n  var pos = 0\n  for (i = 0; i < list.length; ++i) {\n    var buf = list[i]\n    if (isInstance(buf, Uint8Array)) {\n      buf = Buffer.from(buf)\n    }\n    if (!Buffer.isBuffer(buf)) {\n      throw new TypeError('\"list\" argument must be an Array of Buffers')\n    }\n    buf.copy(buffer, pos)\n    pos += buf.length\n  }\n  return buffer\n}\n\nfunction byteLength (string, encoding) {\n  if (Buffer.isBuffer(string)) {\n    return string.length\n  }\n  if (ArrayBuffer.isView(string) || isInstance(string, ArrayBuffer)) {\n    return string.byteLength\n  }\n  if (typeof string !== 'string') {\n    throw new TypeError(\n      'The \"string\" argument must be one of type string, Buffer, or ArrayBuffer. ' +\n      'Received type ' + typeof string\n    )\n  }\n\n  var len = string.length\n  var mustMatch = (arguments.length > 2 && arguments[2] === true)\n  if (!mustMatch && len === 0) return 0\n\n  // Use a for loop to avoid recursion\n  var loweredCase = false\n  for (;;) {\n    switch (encoding) {\n      case 'ascii':\n      case 'latin1':\n      case 'binary':\n        return len\n      case 'utf8':\n      case 'utf-8':\n        return utf8ToBytes(string).length\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return len * 2\n      case 'hex':\n        return len >>> 1\n      case 'base64':\n        return base64ToBytes(string).length\n      default:\n        if (loweredCase) {\n          return mustMatch ? -1 : utf8ToBytes(string).length // assume utf8\n        }\n        encoding = ('' + encoding).toLowerCase()\n        loweredCase = true\n    }\n  }\n}\nBuffer.byteLength = byteLength\n\nfunction slowToString (encoding, start, end) {\n  var loweredCase = false\n\n  // No need to verify that \"this.length <= MAX_UINT32\" since it's a read-only\n  // property of a typed array.\n\n  // This behaves neither like String nor Uint8Array in that we set start/end\n  // to their upper/lower bounds if the value passed is out of range.\n  // undefined is handled specially as per ECMA-262 6th Edition,\n  // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.\n  if (start === undefined || start < 0) {\n    start = 0\n  }\n  // Return early if start > this.length. Done here to prevent potential uint32\n  // coercion fail below.\n  if (start > this.length) {\n    return ''\n  }\n\n  if (end === undefined || end > this.length) {\n    end = this.length\n  }\n\n  if (end <= 0) {\n    return ''\n  }\n\n  // Force coersion to uint32. This will also coerce falsey/NaN values to 0.\n  end >>>= 0\n  start >>>= 0\n\n  if (end <= start) {\n    return ''\n  }\n\n  if (!encoding) encoding = 'utf8'\n\n  while (true) {\n    switch (encoding) {\n      case 'hex':\n        return hexSlice(this, start, end)\n\n      case 'utf8':\n      case 'utf-8':\n        return utf8Slice(this, start, end)\n\n      case 'ascii':\n        return asciiSlice(this, start, end)\n\n      case 'latin1':\n      case 'binary':\n        return latin1Slice(this, start, end)\n\n      case 'base64':\n        return base64Slice(this, start, end)\n\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return utf16leSlice(this, start, end)\n\n      default:\n        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)\n        encoding = (encoding + '').toLowerCase()\n        loweredCase = true\n    }\n  }\n}\n\n// This property is used by `Buffer.isBuffer` (and the `is-buffer` npm package)\n// to detect a Buffer instance. It's not possible to use `instanceof Buffer`\n// reliably in a browserify context because there could be multiple different\n// copies of the 'buffer' package in use. This method works even for Buffer\n// instances that were created from another copy of the `buffer` package.\n// See: https://github.com/feross/buffer/issues/154\nBuffer.prototype._isBuffer = true\n\nfunction swap (b, n, m) {\n  var i = b[n]\n  b[n] = b[m]\n  b[m] = i\n}\n\nBuffer.prototype.swap16 = function swap16 () {\n  var len = this.length\n  if (len % 2 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 16-bits')\n  }\n  for (var i = 0; i < len; i += 2) {\n    swap(this, i, i + 1)\n  }\n  return this\n}\n\nBuffer.prototype.swap32 = function swap32 () {\n  var len = this.length\n  if (len % 4 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 32-bits')\n  }\n  for (var i = 0; i < len; i += 4) {\n    swap(this, i, i + 3)\n    swap(this, i + 1, i + 2)\n  }\n  return this\n}\n\nBuffer.prototype.swap64 = function swap64 () {\n  var len = this.length\n  if (len % 8 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 64-bits')\n  }\n  for (var i = 0; i < len; i += 8) {\n    swap(this, i, i + 7)\n    swap(this, i + 1, i + 6)\n    swap(this, i + 2, i + 5)\n    swap(this, i + 3, i + 4)\n  }\n  return this\n}\n\nBuffer.prototype.toString = function toString () {\n  var length = this.length\n  if (length === 0) return ''\n  if (arguments.length === 0) return utf8Slice(this, 0, length)\n  return slowToString.apply(this, arguments)\n}\n\nBuffer.prototype.toLocaleString = Buffer.prototype.toString\n\nBuffer.prototype.equals = function equals (b) {\n  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')\n  if (this === b) return true\n  return Buffer.compare(this, b) === 0\n}\n\nBuffer.prototype.inspect = function inspect () {\n  var str = ''\n  var max = exports.INSPECT_MAX_BYTES\n  str = this.toString('hex', 0, max).replace(/(.{2})/g, '$1 ').trim()\n  if (this.length > max) str += ' ... '\n  return '<Buffer ' + str + '>'\n}\n\nBuffer.prototype.compare = function compare (target, start, end, thisStart, thisEnd) {\n  if (isInstance(target, Uint8Array)) {\n    target = Buffer.from(target, target.offset, target.byteLength)\n  }\n  if (!Buffer.isBuffer(target)) {\n    throw new TypeError(\n      'The \"target\" argument must be one of type Buffer or Uint8Array. ' +\n      'Received type ' + (typeof target)\n    )\n  }\n\n  if (start === undefined) {\n    start = 0\n  }\n  if (end === undefined) {\n    end = target ? target.length : 0\n  }\n  if (thisStart === undefined) {\n    thisStart = 0\n  }\n  if (thisEnd === undefined) {\n    thisEnd = this.length\n  }\n\n  if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {\n    throw new RangeError('out of range index')\n  }\n\n  if (thisStart >= thisEnd && start >= end) {\n    return 0\n  }\n  if (thisStart >= thisEnd) {\n    return -1\n  }\n  if (start >= end) {\n    return 1\n  }\n\n  start >>>= 0\n  end >>>= 0\n  thisStart >>>= 0\n  thisEnd >>>= 0\n\n  if (this === target) return 0\n\n  var x = thisEnd - thisStart\n  var y = end - start\n  var len = Math.min(x, y)\n\n  var thisCopy = this.slice(thisStart, thisEnd)\n  var targetCopy = target.slice(start, end)\n\n  for (var i = 0; i < len; ++i) {\n    if (thisCopy[i] !== targetCopy[i]) {\n      x = thisCopy[i]\n      y = targetCopy[i]\n      break\n    }\n  }\n\n  if (x < y) return -1\n  if (y < x) return 1\n  return 0\n}\n\n// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,\n// OR the last index of `val` in `buffer` at offset <= `byteOffset`.\n//\n// Arguments:\n// - buffer - a Buffer to search\n// - val - a string, Buffer, or number\n// - byteOffset - an index into `buffer`; will be clamped to an int32\n// - encoding - an optional encoding, relevant is val is a string\n// - dir - true for indexOf, false for lastIndexOf\nfunction bidirectionalIndexOf (buffer, val, byteOffset, encoding, dir) {\n  // Empty buffer means no match\n  if (buffer.length === 0) return -1\n\n  // Normalize byteOffset\n  if (typeof byteOffset === 'string') {\n    encoding = byteOffset\n    byteOffset = 0\n  } else if (byteOffset > 0x7fffffff) {\n    byteOffset = 0x7fffffff\n  } else if (byteOffset < -0x80000000) {\n    byteOffset = -0x80000000\n  }\n  byteOffset = +byteOffset // Coerce to Number.\n  if (numberIsNaN(byteOffset)) {\n    // byteOffset: it it's undefined, null, NaN, \"foo\", etc, search whole buffer\n    byteOffset = dir ? 0 : (buffer.length - 1)\n  }\n\n  // Normalize byteOffset: negative offsets start from the end of the buffer\n  if (byteOffset < 0) byteOffset = buffer.length + byteOffset\n  if (byteOffset >= buffer.length) {\n    if (dir) return -1\n    else byteOffset = buffer.length - 1\n  } else if (byteOffset < 0) {\n    if (dir) byteOffset = 0\n    else return -1\n  }\n\n  // Normalize val\n  if (typeof val === 'string') {\n    val = Buffer.from(val, encoding)\n  }\n\n  // Finally, search either indexOf (if dir is true) or lastIndexOf\n  if (Buffer.isBuffer(val)) {\n    // Special case: looking for empty string/buffer always fails\n    if (val.length === 0) {\n      return -1\n    }\n    return arrayIndexOf(buffer, val, byteOffset, encoding, dir)\n  } else if (typeof val === 'number') {\n    val = val & 0xFF // Search for a byte value [0-255]\n    if (typeof Uint8Array.prototype.indexOf === 'function') {\n      if (dir) {\n        return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset)\n      } else {\n        return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset)\n      }\n    }\n    return arrayIndexOf(buffer, [ val ], byteOffset, encoding, dir)\n  }\n\n  throw new TypeError('val must be string, number or Buffer')\n}\n\nfunction arrayIndexOf (arr, val, byteOffset, encoding, dir) {\n  var indexSize = 1\n  var arrLength = arr.length\n  var valLength = val.length\n\n  if (encoding !== undefined) {\n    encoding = String(encoding).toLowerCase()\n    if (encoding === 'ucs2' || encoding === 'ucs-2' ||\n        encoding === 'utf16le' || encoding === 'utf-16le') {\n      if (arr.length < 2 || val.length < 2) {\n        return -1\n      }\n      indexSize = 2\n      arrLength /= 2\n      valLength /= 2\n      byteOffset /= 2\n    }\n  }\n\n  function read (buf, i) {\n    if (indexSize === 1) {\n      return buf[i]\n    } else {\n      return buf.readUInt16BE(i * indexSize)\n    }\n  }\n\n  var i\n  if (dir) {\n    var foundIndex = -1\n    for (i = byteOffset; i < arrLength; i++) {\n      if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {\n        if (foundIndex === -1) foundIndex = i\n        if (i - foundIndex + 1 === valLength) return foundIndex * indexSize\n      } else {\n        if (foundIndex !== -1) i -= i - foundIndex\n        foundIndex = -1\n      }\n    }\n  } else {\n    if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength\n    for (i = byteOffset; i >= 0; i--) {\n      var found = true\n      for (var j = 0; j < valLength; j++) {\n        if (read(arr, i + j) !== read(val, j)) {\n          found = false\n          break\n        }\n      }\n      if (found) return i\n    }\n  }\n\n  return -1\n}\n\nBuffer.prototype.includes = function includes (val, byteOffset, encoding) {\n  return this.indexOf(val, byteOffset, encoding) !== -1\n}\n\nBuffer.prototype.indexOf = function indexOf (val, byteOffset, encoding) {\n  return bidirectionalIndexOf(this, val, byteOffset, encoding, true)\n}\n\nBuffer.prototype.lastIndexOf = function lastIndexOf (val, byteOffset, encoding) {\n  return bidirectionalIndexOf(this, val, byteOffset, encoding, false)\n}\n\nfunction hexWrite (buf, string, offset, length) {\n  offset = Number(offset) || 0\n  var remaining = buf.length - offset\n  if (!length) {\n    length = remaining\n  } else {\n    length = Number(length)\n    if (length > remaining) {\n      length = remaining\n    }\n  }\n\n  var strLen = string.length\n\n  if (length > strLen / 2) {\n    length = strLen / 2\n  }\n  for (var i = 0; i < length; ++i) {\n    var parsed = parseInt(string.substr(i * 2, 2), 16)\n    if (numberIsNaN(parsed)) return i\n    buf[offset + i] = parsed\n  }\n  return i\n}\n\nfunction utf8Write (buf, string, offset, length) {\n  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)\n}\n\nfunction asciiWrite (buf, string, offset, length) {\n  return blitBuffer(asciiToBytes(string), buf, offset, length)\n}\n\nfunction latin1Write (buf, string, offset, length) {\n  return asciiWrite(buf, string, offset, length)\n}\n\nfunction base64Write (buf, string, offset, length) {\n  return blitBuffer(base64ToBytes(string), buf, offset, length)\n}\n\nfunction ucs2Write (buf, string, offset, length) {\n  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)\n}\n\nBuffer.prototype.write = function write (string, offset, length, encoding) {\n  // Buffer#write(string)\n  if (offset === undefined) {\n    encoding = 'utf8'\n    length = this.length\n    offset = 0\n  // Buffer#write(string, encoding)\n  } else if (length === undefined && typeof offset === 'string') {\n    encoding = offset\n    length = this.length\n    offset = 0\n  // Buffer#write(string, offset[, length][, encoding])\n  } else if (isFinite(offset)) {\n    offset = offset >>> 0\n    if (isFinite(length)) {\n      length = length >>> 0\n      if (encoding === undefined) encoding = 'utf8'\n    } else {\n      encoding = length\n      length = undefined\n    }\n  } else {\n    throw new Error(\n      'Buffer.write(string, encoding, offset[, length]) is no longer supported'\n    )\n  }\n\n  var remaining = this.length - offset\n  if (length === undefined || length > remaining) length = remaining\n\n  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {\n    throw new RangeError('Attempt to write outside buffer bounds')\n  }\n\n  if (!encoding) encoding = 'utf8'\n\n  var loweredCase = false\n  for (;;) {\n    switch (encoding) {\n      case 'hex':\n        return hexWrite(this, string, offset, length)\n\n      case 'utf8':\n      case 'utf-8':\n        return utf8Write(this, string, offset, length)\n\n      case 'ascii':\n        return asciiWrite(this, string, offset, length)\n\n      case 'latin1':\n      case 'binary':\n        return latin1Write(this, string, offset, length)\n\n      case 'base64':\n        // Warning: maxLength not taken into account in base64Write\n        return base64Write(this, string, offset, length)\n\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return ucs2Write(this, string, offset, length)\n\n      default:\n        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)\n        encoding = ('' + encoding).toLowerCase()\n        loweredCase = true\n    }\n  }\n}\n\nBuffer.prototype.toJSON = function toJSON () {\n  return {\n    type: 'Buffer',\n    data: Array.prototype.slice.call(this._arr || this, 0)\n  }\n}\n\nfunction base64Slice (buf, start, end) {\n  if (start === 0 && end === buf.length) {\n    return base64.fromByteArray(buf)\n  } else {\n    return base64.fromByteArray(buf.slice(start, end))\n  }\n}\n\nfunction utf8Slice (buf, start, end) {\n  end = Math.min(buf.length, end)\n  var res = []\n\n  var i = start\n  while (i < end) {\n    var firstByte = buf[i]\n    var codePoint = null\n    var bytesPerSequence = (firstByte > 0xEF) ? 4\n      : (firstByte > 0xDF) ? 3\n        : (firstByte > 0xBF) ? 2\n          : 1\n\n    if (i + bytesPerSequence <= end) {\n      var secondByte, thirdByte, fourthByte, tempCodePoint\n\n      switch (bytesPerSequence) {\n        case 1:\n          if (firstByte < 0x80) {\n            codePoint = firstByte\n          }\n          break\n        case 2:\n          secondByte = buf[i + 1]\n          if ((secondByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F)\n            if (tempCodePoint > 0x7F) {\n              codePoint = tempCodePoint\n            }\n          }\n          break\n        case 3:\n          secondByte = buf[i + 1]\n          thirdByte = buf[i + 2]\n          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F)\n            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {\n              codePoint = tempCodePoint\n            }\n          }\n          break\n        case 4:\n          secondByte = buf[i + 1]\n          thirdByte = buf[i + 2]\n          fourthByte = buf[i + 3]\n          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F)\n            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {\n              codePoint = tempCodePoint\n            }\n          }\n      }\n    }\n\n    if (codePoint === null) {\n      // we did not generate a valid codePoint so insert a\n      // replacement char (U+FFFD) and advance only 1 byte\n      codePoint = 0xFFFD\n      bytesPerSequence = 1\n    } else if (codePoint > 0xFFFF) {\n      // encode to utf16 (surrogate pair dance)\n      codePoint -= 0x10000\n      res.push(codePoint >>> 10 & 0x3FF | 0xD800)\n      codePoint = 0xDC00 | codePoint & 0x3FF\n    }\n\n    res.push(codePoint)\n    i += bytesPerSequence\n  }\n\n  return decodeCodePointsArray(res)\n}\n\n// Based on http://stackoverflow.com/a/22747272/680742, the browser with\n// the lowest limit is Chrome, with 0x10000 args.\n// We go 1 magnitude less, for safety\nvar MAX_ARGUMENTS_LENGTH = 0x1000\n\nfunction decodeCodePointsArray (codePoints) {\n  var len = codePoints.length\n  if (len <= MAX_ARGUMENTS_LENGTH) {\n    return String.fromCharCode.apply(String, codePoints) // avoid extra slice()\n  }\n\n  // Decode in chunks to avoid \"call stack size exceeded\".\n  var res = ''\n  var i = 0\n  while (i < len) {\n    res += String.fromCharCode.apply(\n      String,\n      codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)\n    )\n  }\n  return res\n}\n\nfunction asciiSlice (buf, start, end) {\n  var ret = ''\n  end = Math.min(buf.length, end)\n\n  for (var i = start; i < end; ++i) {\n    ret += String.fromCharCode(buf[i] & 0x7F)\n  }\n  return ret\n}\n\nfunction latin1Slice (buf, start, end) {\n  var ret = ''\n  end = Math.min(buf.length, end)\n\n  for (var i = start; i < end; ++i) {\n    ret += String.fromCharCode(buf[i])\n  }\n  return ret\n}\n\nfunction hexSlice (buf, start, end) {\n  var len = buf.length\n\n  if (!start || start < 0) start = 0\n  if (!end || end < 0 || end > len) end = len\n\n  var out = ''\n  for (var i = start; i < end; ++i) {\n    out += toHex(buf[i])\n  }\n  return out\n}\n\nfunction utf16leSlice (buf, start, end) {\n  var bytes = buf.slice(start, end)\n  var res = ''\n  for (var i = 0; i < bytes.length; i += 2) {\n    res += String.fromCharCode(bytes[i] + (bytes[i + 1] * 256))\n  }\n  return res\n}\n\nBuffer.prototype.slice = function slice (start, end) {\n  var len = this.length\n  start = ~~start\n  end = end === undefined ? len : ~~end\n\n  if (start < 0) {\n    start += len\n    if (start < 0) start = 0\n  } else if (start > len) {\n    start = len\n  }\n\n  if (end < 0) {\n    end += len\n    if (end < 0) end = 0\n  } else if (end > len) {\n    end = len\n  }\n\n  if (end < start) end = start\n\n  var newBuf = this.subarray(start, end)\n  // Return an augmented `Uint8Array` instance\n  newBuf.__proto__ = Buffer.prototype\n  return newBuf\n}\n\n/*\n * Need to make sure that buffer isn't trying to write out of bounds.\n */\nfunction checkOffset (offset, ext, length) {\n  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')\n  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')\n}\n\nBuffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  var val = this[offset]\n  var mul = 1\n  var i = 0\n  while (++i < byteLength && (mul *= 0x100)) {\n    val += this[offset + i] * mul\n  }\n\n  return val\n}\n\nBuffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) {\n    checkOffset(offset, byteLength, this.length)\n  }\n\n  var val = this[offset + --byteLength]\n  var mul = 1\n  while (byteLength > 0 && (mul *= 0x100)) {\n    val += this[offset + --byteLength] * mul\n  }\n\n  return val\n}\n\nBuffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 1, this.length)\n  return this[offset]\n}\n\nBuffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  return this[offset] | (this[offset + 1] << 8)\n}\n\nBuffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  return (this[offset] << 8) | this[offset + 1]\n}\n\nBuffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return ((this[offset]) |\n      (this[offset + 1] << 8) |\n      (this[offset + 2] << 16)) +\n      (this[offset + 3] * 0x1000000)\n}\n\nBuffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset] * 0x1000000) +\n    ((this[offset + 1] << 16) |\n    (this[offset + 2] << 8) |\n    this[offset + 3])\n}\n\nBuffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  var val = this[offset]\n  var mul = 1\n  var i = 0\n  while (++i < byteLength && (mul *= 0x100)) {\n    val += this[offset + i] * mul\n  }\n  mul *= 0x80\n\n  if (val >= mul) val -= Math.pow(2, 8 * byteLength)\n\n  return val\n}\n\nBuffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  var i = byteLength\n  var mul = 1\n  var val = this[offset + --i]\n  while (i > 0 && (mul *= 0x100)) {\n    val += this[offset + --i] * mul\n  }\n  mul *= 0x80\n\n  if (val >= mul) val -= Math.pow(2, 8 * byteLength)\n\n  return val\n}\n\nBuffer.prototype.readInt8 = function readInt8 (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 1, this.length)\n  if (!(this[offset] & 0x80)) return (this[offset])\n  return ((0xff - this[offset] + 1) * -1)\n}\n\nBuffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  var val = this[offset] | (this[offset + 1] << 8)\n  return (val & 0x8000) ? val | 0xFFFF0000 : val\n}\n\nBuffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  var val = this[offset + 1] | (this[offset] << 8)\n  return (val & 0x8000) ? val | 0xFFFF0000 : val\n}\n\nBuffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset]) |\n    (this[offset + 1] << 8) |\n    (this[offset + 2] << 16) |\n    (this[offset + 3] << 24)\n}\n\nBuffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset] << 24) |\n    (this[offset + 1] << 16) |\n    (this[offset + 2] << 8) |\n    (this[offset + 3])\n}\n\nBuffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n  return ieee754.read(this, offset, true, 23, 4)\n}\n\nBuffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n  return ieee754.read(this, offset, false, 23, 4)\n}\n\nBuffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 8, this.length)\n  return ieee754.read(this, offset, true, 52, 8)\n}\n\nBuffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 8, this.length)\n  return ieee754.read(this, offset, false, 52, 8)\n}\n\nfunction checkInt (buf, value, offset, ext, max, min) {\n  if (!Buffer.isBuffer(buf)) throw new TypeError('\"buffer\" argument must be a Buffer instance')\n  if (value > max || value < min) throw new RangeError('\"value\" argument is out of bounds')\n  if (offset + ext > buf.length) throw new RangeError('Index out of range')\n}\n\nBuffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) {\n    var maxBytes = Math.pow(2, 8 * byteLength) - 1\n    checkInt(this, value, offset, byteLength, maxBytes, 0)\n  }\n\n  var mul = 1\n  var i = 0\n  this[offset] = value & 0xFF\n  while (++i < byteLength && (mul *= 0x100)) {\n    this[offset + i] = (value / mul) & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) {\n    var maxBytes = Math.pow(2, 8 * byteLength) - 1\n    checkInt(this, value, offset, byteLength, maxBytes, 0)\n  }\n\n  var i = byteLength - 1\n  var mul = 1\n  this[offset + i] = value & 0xFF\n  while (--i >= 0 && (mul *= 0x100)) {\n    this[offset + i] = (value / mul) & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)\n  this[offset] = (value & 0xff)\n  return offset + 1\n}\n\nBuffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)\n  this[offset] = (value & 0xff)\n  this[offset + 1] = (value >>> 8)\n  return offset + 2\n}\n\nBuffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)\n  this[offset] = (value >>> 8)\n  this[offset + 1] = (value & 0xff)\n  return offset + 2\n}\n\nBuffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)\n  this[offset + 3] = (value >>> 24)\n  this[offset + 2] = (value >>> 16)\n  this[offset + 1] = (value >>> 8)\n  this[offset] = (value & 0xff)\n  return offset + 4\n}\n\nBuffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)\n  this[offset] = (value >>> 24)\n  this[offset + 1] = (value >>> 16)\n  this[offset + 2] = (value >>> 8)\n  this[offset + 3] = (value & 0xff)\n  return offset + 4\n}\n\nBuffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) {\n    var limit = Math.pow(2, (8 * byteLength) - 1)\n\n    checkInt(this, value, offset, byteLength, limit - 1, -limit)\n  }\n\n  var i = 0\n  var mul = 1\n  var sub = 0\n  this[offset] = value & 0xFF\n  while (++i < byteLength && (mul *= 0x100)) {\n    if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {\n      sub = 1\n    }\n    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) {\n    var limit = Math.pow(2, (8 * byteLength) - 1)\n\n    checkInt(this, value, offset, byteLength, limit - 1, -limit)\n  }\n\n  var i = byteLength - 1\n  var mul = 1\n  var sub = 0\n  this[offset + i] = value & 0xFF\n  while (--i >= 0 && (mul *= 0x100)) {\n    if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {\n      sub = 1\n    }\n    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)\n  if (value < 0) value = 0xff + value + 1\n  this[offset] = (value & 0xff)\n  return offset + 1\n}\n\nBuffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)\n  this[offset] = (value & 0xff)\n  this[offset + 1] = (value >>> 8)\n  return offset + 2\n}\n\nBuffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)\n  this[offset] = (value >>> 8)\n  this[offset + 1] = (value & 0xff)\n  return offset + 2\n}\n\nBuffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)\n  this[offset] = (value & 0xff)\n  this[offset + 1] = (value >>> 8)\n  this[offset + 2] = (value >>> 16)\n  this[offset + 3] = (value >>> 24)\n  return offset + 4\n}\n\nBuffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)\n  if (value < 0) value = 0xffffffff + value + 1\n  this[offset] = (value >>> 24)\n  this[offset + 1] = (value >>> 16)\n  this[offset + 2] = (value >>> 8)\n  this[offset + 3] = (value & 0xff)\n  return offset + 4\n}\n\nfunction checkIEEE754 (buf, value, offset, ext, max, min) {\n  if (offset + ext > buf.length) throw new RangeError('Index out of range')\n  if (offset < 0) throw new RangeError('Index out of range')\n}\n\nfunction writeFloat (buf, value, offset, littleEndian, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) {\n    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)\n  }\n  ieee754.write(buf, value, offset, littleEndian, 23, 4)\n  return offset + 4\n}\n\nBuffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {\n  return writeFloat(this, value, offset, true, noAssert)\n}\n\nBuffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {\n  return writeFloat(this, value, offset, false, noAssert)\n}\n\nfunction writeDouble (buf, value, offset, littleEndian, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) {\n    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)\n  }\n  ieee754.write(buf, value, offset, littleEndian, 52, 8)\n  return offset + 8\n}\n\nBuffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {\n  return writeDouble(this, value, offset, true, noAssert)\n}\n\nBuffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {\n  return writeDouble(this, value, offset, false, noAssert)\n}\n\n// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)\nBuffer.prototype.copy = function copy (target, targetStart, start, end) {\n  if (!Buffer.isBuffer(target)) throw new TypeError('argument should be a Buffer')\n  if (!start) start = 0\n  if (!end && end !== 0) end = this.length\n  if (targetStart >= target.length) targetStart = target.length\n  if (!targetStart) targetStart = 0\n  if (end > 0 && end < start) end = start\n\n  // Copy 0 bytes; we're done\n  if (end === start) return 0\n  if (target.length === 0 || this.length === 0) return 0\n\n  // Fatal error conditions\n  if (targetStart < 0) {\n    throw new RangeError('targetStart out of bounds')\n  }\n  if (start < 0 || start >= this.length) throw new RangeError('Index out of range')\n  if (end < 0) throw new RangeError('sourceEnd out of bounds')\n\n  // Are we oob?\n  if (end > this.length) end = this.length\n  if (target.length - targetStart < end - start) {\n    end = target.length - targetStart + start\n  }\n\n  var len = end - start\n\n  if (this === target && typeof Uint8Array.prototype.copyWithin === 'function') {\n    // Use built-in when available, missing from IE11\n    this.copyWithin(targetStart, start, end)\n  } else if (this === target && start < targetStart && targetStart < end) {\n    // descending copy from end\n    for (var i = len - 1; i >= 0; --i) {\n      target[i + targetStart] = this[i + start]\n    }\n  } else {\n    Uint8Array.prototype.set.call(\n      target,\n      this.subarray(start, end),\n      targetStart\n    )\n  }\n\n  return len\n}\n\n// Usage:\n//    buffer.fill(number[, offset[, end]])\n//    buffer.fill(buffer[, offset[, end]])\n//    buffer.fill(string[, offset[, end]][, encoding])\nBuffer.prototype.fill = function fill (val, start, end, encoding) {\n  // Handle string cases:\n  if (typeof val === 'string') {\n    if (typeof start === 'string') {\n      encoding = start\n      start = 0\n      end = this.length\n    } else if (typeof end === 'string') {\n      encoding = end\n      end = this.length\n    }\n    if (encoding !== undefined && typeof encoding !== 'string') {\n      throw new TypeError('encoding must be a string')\n    }\n    if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {\n      throw new TypeError('Unknown encoding: ' + encoding)\n    }\n    if (val.length === 1) {\n      var code = val.charCodeAt(0)\n      if ((encoding === 'utf8' && code < 128) ||\n          encoding === 'latin1') {\n        // Fast path: If `val` fits into a single byte, use that numeric value.\n        val = code\n      }\n    }\n  } else if (typeof val === 'number') {\n    val = val & 255\n  }\n\n  // Invalid ranges are not set to a default, so can range check early.\n  if (start < 0 || this.length < start || this.length < end) {\n    throw new RangeError('Out of range index')\n  }\n\n  if (end <= start) {\n    return this\n  }\n\n  start = start >>> 0\n  end = end === undefined ? this.length : end >>> 0\n\n  if (!val) val = 0\n\n  var i\n  if (typeof val === 'number') {\n    for (i = start; i < end; ++i) {\n      this[i] = val\n    }\n  } else {\n    var bytes = Buffer.isBuffer(val)\n      ? val\n      : Buffer.from(val, encoding)\n    var len = bytes.length\n    if (len === 0) {\n      throw new TypeError('The value \"' + val +\n        '\" is invalid for argument \"value\"')\n    }\n    for (i = 0; i < end - start; ++i) {\n      this[i + start] = bytes[i % len]\n    }\n  }\n\n  return this\n}\n\n// HELPER FUNCTIONS\n// ================\n\nvar INVALID_BASE64_RE = /[^+/0-9A-Za-z-_]/g\n\nfunction base64clean (str) {\n  // Node takes equal signs as end of the Base64 encoding\n  str = str.split('=')[0]\n  // Node strips out invalid characters like \\n and \\t from the string, base64-js does not\n  str = str.trim().replace(INVALID_BASE64_RE, '')\n  // Node converts strings with length < 2 to ''\n  if (str.length < 2) return ''\n  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not\n  while (str.length % 4 !== 0) {\n    str = str + '='\n  }\n  return str\n}\n\nfunction toHex (n) {\n  if (n < 16) return '0' + n.toString(16)\n  return n.toString(16)\n}\n\nfunction utf8ToBytes (string, units) {\n  units = units || Infinity\n  var codePoint\n  var length = string.length\n  var leadSurrogate = null\n  var bytes = []\n\n  for (var i = 0; i < length; ++i) {\n    codePoint = string.charCodeAt(i)\n\n    // is surrogate component\n    if (codePoint > 0xD7FF && codePoint < 0xE000) {\n      // last char was a lead\n      if (!leadSurrogate) {\n        // no lead yet\n        if (codePoint > 0xDBFF) {\n          // unexpected trail\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n          continue\n        } else if (i + 1 === length) {\n          // unpaired lead\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n          continue\n        }\n\n        // valid lead\n        leadSurrogate = codePoint\n\n        continue\n      }\n\n      // 2 leads in a row\n      if (codePoint < 0xDC00) {\n        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n        leadSurrogate = codePoint\n        continue\n      }\n\n      // valid surrogate pair\n      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000\n    } else if (leadSurrogate) {\n      // valid bmp char, but last char was a lead\n      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n    }\n\n    leadSurrogate = null\n\n    // encode utf8\n    if (codePoint < 0x80) {\n      if ((units -= 1) < 0) break\n      bytes.push(codePoint)\n    } else if (codePoint < 0x800) {\n      if ((units -= 2) < 0) break\n      bytes.push(\n        codePoint >> 0x6 | 0xC0,\n        codePoint & 0x3F | 0x80\n      )\n    } else if (codePoint < 0x10000) {\n      if ((units -= 3) < 0) break\n      bytes.push(\n        codePoint >> 0xC | 0xE0,\n        codePoint >> 0x6 & 0x3F | 0x80,\n        codePoint & 0x3F | 0x80\n      )\n    } else if (codePoint < 0x110000) {\n      if ((units -= 4) < 0) break\n      bytes.push(\n        codePoint >> 0x12 | 0xF0,\n        codePoint >> 0xC & 0x3F | 0x80,\n        codePoint >> 0x6 & 0x3F | 0x80,\n        codePoint & 0x3F | 0x80\n      )\n    } else {\n      throw new Error('Invalid code point')\n    }\n  }\n\n  return bytes\n}\n\nfunction asciiToBytes (str) {\n  var byteArray = []\n  for (var i = 0; i < str.length; ++i) {\n    // Node's code seems to be doing this and not & 0x7F..\n    byteArray.push(str.charCodeAt(i) & 0xFF)\n  }\n  return byteArray\n}\n\nfunction utf16leToBytes (str, units) {\n  var c, hi, lo\n  var byteArray = []\n  for (var i = 0; i < str.length; ++i) {\n    if ((units -= 2) < 0) break\n\n    c = str.charCodeAt(i)\n    hi = c >> 8\n    lo = c % 256\n    byteArray.push(lo)\n    byteArray.push(hi)\n  }\n\n  return byteArray\n}\n\nfunction base64ToBytes (str) {\n  return base64.toByteArray(base64clean(str))\n}\n\nfunction blitBuffer (src, dst, offset, length) {\n  for (var i = 0; i < length; ++i) {\n    if ((i + offset >= dst.length) || (i >= src.length)) break\n    dst[i + offset] = src[i]\n  }\n  return i\n}\n\n// ArrayBuffer or Uint8Array objects from other contexts (i.e. iframes) do not pass\n// the `instanceof` check but they should be treated as of that type.\n// See: https://github.com/feross/buffer/issues/166\nfunction isInstance (obj, type) {\n  return obj instanceof type ||\n    (obj != null && obj.constructor != null && obj.constructor.name != null &&\n      obj.constructor.name === type.name)\n}\nfunction numberIsNaN (obj) {\n  // For IE11 support\n  return obj !== obj // eslint-disable-line no-self-compare\n}\n","exports.read = function (buffer, offset, isLE, mLen, nBytes) {\n  var e, m\n  var eLen = (nBytes * 8) - mLen - 1\n  var eMax = (1 << eLen) - 1\n  var eBias = eMax >> 1\n  var nBits = -7\n  var i = isLE ? (nBytes - 1) : 0\n  var d = isLE ? -1 : 1\n  var s = buffer[offset + i]\n\n  i += d\n\n  e = s & ((1 << (-nBits)) - 1)\n  s >>= (-nBits)\n  nBits += eLen\n  for (; nBits > 0; e = (e * 256) + buffer[offset + i], i += d, nBits -= 8) {}\n\n  m = e & ((1 << (-nBits)) - 1)\n  e >>= (-nBits)\n  nBits += mLen\n  for (; nBits > 0; m = (m * 256) + buffer[offset + i], i += d, nBits -= 8) {}\n\n  if (e === 0) {\n    e = 1 - eBias\n  } else if (e === eMax) {\n    return m ? NaN : ((s ? -1 : 1) * Infinity)\n  } else {\n    m = m + Math.pow(2, mLen)\n    e = e - eBias\n  }\n  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)\n}\n\nexports.write = function (buffer, value, offset, isLE, mLen, nBytes) {\n  var e, m, c\n  var eLen = (nBytes * 8) - mLen - 1\n  var eMax = (1 << eLen) - 1\n  var eBias = eMax >> 1\n  var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0)\n  var i = isLE ? 0 : (nBytes - 1)\n  var d = isLE ? 1 : -1\n  var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0\n\n  value = Math.abs(value)\n\n  if (isNaN(value) || value === Infinity) {\n    m = isNaN(value) ? 1 : 0\n    e = eMax\n  } else {\n    e = Math.floor(Math.log(value) / Math.LN2)\n    if (value * (c = Math.pow(2, -e)) < 1) {\n      e--\n      c *= 2\n    }\n    if (e + eBias >= 1) {\n      value += rt / c\n    } else {\n      value += rt * Math.pow(2, 1 - eBias)\n    }\n    if (value * c >= 2) {\n      e++\n      c /= 2\n    }\n\n    if (e + eBias >= eMax) {\n      m = 0\n      e = eMax\n    } else if (e + eBias >= 1) {\n      m = ((value * c) - 1) * Math.pow(2, mLen)\n      e = e + eBias\n    } else {\n      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen)\n      e = 0\n    }\n  }\n\n  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}\n\n  e = (e << mLen) | m\n  eLen += mLen\n  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}\n\n  buffer[offset + i - d] |= s * 128\n}\n"]}