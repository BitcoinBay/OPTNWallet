{
  "contractName": "Escrow",
  "constructorInputs": [
    {
      "name": "arbiter",
      "type": "bytes20"
    },
    {
      "name": "buyer",
      "type": "bytes20"
    },
    {
      "name": "seller",
      "type": "bytes20"
    }
  ],
  "abi": [
    {
      "name": "spend",
      "inputs": [
        {
          "name": "pk",
          "type": "pubkey"
        },
        {
          "name": "s",
          "type": "sig"
        }
      ]
    }
  ],
  "bytecode": "OP_3 OP_PICK OP_HASH160 OP_EQUALVERIFY OP_2SWAP OP_CHECKSIGVERIFY e803 OP_INPUTINDEX OP_UTXOVALUE OP_SWAP OP_SUB OP_0 OP_OUTPUTVALUE OP_NUMEQUALVERIFY 76a914 OP_SWAP OP_CAT 88ac OP_CAT 76a914 OP_ROT OP_CAT 88ac OP_CAT OP_0 OP_OUTPUTBYTECODE OP_ROT OP_EQUAL OP_0 OP_OUTPUTBYTECODE OP_ROT OP_EQUAL OP_BOOLOR",
  "source": "pragma cashscript ^0.9.0;\n\ncontract Escrow(bytes20 arbiter, bytes20 buyer, bytes20 seller) {\n    function spend(pubkey pk, sig s) {\n        require(hash160(pk) == arbiter);\n        require(checkSig(s, pk));\n\n        // Check that the correct amount is sent\n        int minerFee = 1000; // hardcoded fee\n        int amount = tx.inputs[this.activeInputIndex].value - minerFee;\n        require(tx.outputs[0].value == amount);\n\n        // Check that the transaction sends to either the buyer or the seller\n        bytes25 buyerLock = new LockingBytecodeP2PKH(buyer);\n        bytes25 sellerLock = new LockingBytecodeP2PKH(seller);\n        bool sendsToBuyer = tx.outputs[0].lockingBytecode == buyerLock;\n        bool sendsToSeller = tx.outputs[0].lockingBytecode == sellerLock;\n        require(sendsToBuyer || sendsToSeller);\n    }\n}",
  "compiler": {
    "name": "cashc",
    "version": "0.9.3"
  },
  "updatedAt": "2024-08-02T17:34:51.488Z"
}